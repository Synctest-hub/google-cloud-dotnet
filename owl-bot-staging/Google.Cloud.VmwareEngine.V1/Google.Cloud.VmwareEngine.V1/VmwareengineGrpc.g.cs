// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: google/cloud/vmwareengine/v1/vmwareengine.proto
// </auto-generated>
// Original file comments:
// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#pragma warning disable 0414, 1591, 8981
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Google.Cloud.VmwareEngine.V1 {
  /// <summary>
  /// VMwareEngine manages VMware's private clusters in the Cloud.
  /// </summary>
  public static partial class VmwareEngine
  {
    static readonly string __ServiceName = "google.cloud.vmwareengine.v1.VmwareEngine";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.VmwareEngine.V1.ListPrivateCloudsRequest> __Marshaller_google_cloud_vmwareengine_v1_ListPrivateCloudsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.VmwareEngine.V1.ListPrivateCloudsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.VmwareEngine.V1.ListPrivateCloudsResponse> __Marshaller_google_cloud_vmwareengine_v1_ListPrivateCloudsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.VmwareEngine.V1.ListPrivateCloudsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.VmwareEngine.V1.GetPrivateCloudRequest> __Marshaller_google_cloud_vmwareengine_v1_GetPrivateCloudRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.VmwareEngine.V1.GetPrivateCloudRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.VmwareEngine.V1.PrivateCloud> __Marshaller_google_cloud_vmwareengine_v1_PrivateCloud = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.VmwareEngine.V1.PrivateCloud.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.VmwareEngine.V1.CreatePrivateCloudRequest> __Marshaller_google_cloud_vmwareengine_v1_CreatePrivateCloudRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.VmwareEngine.V1.CreatePrivateCloudRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.LongRunning.Operation> __Marshaller_google_longrunning_Operation = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.LongRunning.Operation.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.VmwareEngine.V1.UpdatePrivateCloudRequest> __Marshaller_google_cloud_vmwareengine_v1_UpdatePrivateCloudRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.VmwareEngine.V1.UpdatePrivateCloudRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.VmwareEngine.V1.DeletePrivateCloudRequest> __Marshaller_google_cloud_vmwareengine_v1_DeletePrivateCloudRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.VmwareEngine.V1.DeletePrivateCloudRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.VmwareEngine.V1.UndeletePrivateCloudRequest> __Marshaller_google_cloud_vmwareengine_v1_UndeletePrivateCloudRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.VmwareEngine.V1.UndeletePrivateCloudRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.VmwareEngine.V1.ListClustersRequest> __Marshaller_google_cloud_vmwareengine_v1_ListClustersRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.VmwareEngine.V1.ListClustersRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.VmwareEngine.V1.ListClustersResponse> __Marshaller_google_cloud_vmwareengine_v1_ListClustersResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.VmwareEngine.V1.ListClustersResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.VmwareEngine.V1.GetClusterRequest> __Marshaller_google_cloud_vmwareengine_v1_GetClusterRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.VmwareEngine.V1.GetClusterRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.VmwareEngine.V1.Cluster> __Marshaller_google_cloud_vmwareengine_v1_Cluster = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.VmwareEngine.V1.Cluster.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.VmwareEngine.V1.CreateClusterRequest> __Marshaller_google_cloud_vmwareengine_v1_CreateClusterRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.VmwareEngine.V1.CreateClusterRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.VmwareEngine.V1.UpdateClusterRequest> __Marshaller_google_cloud_vmwareengine_v1_UpdateClusterRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.VmwareEngine.V1.UpdateClusterRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.VmwareEngine.V1.DeleteClusterRequest> __Marshaller_google_cloud_vmwareengine_v1_DeleteClusterRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.VmwareEngine.V1.DeleteClusterRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.VmwareEngine.V1.ListSubnetsRequest> __Marshaller_google_cloud_vmwareengine_v1_ListSubnetsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.VmwareEngine.V1.ListSubnetsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.VmwareEngine.V1.ListSubnetsResponse> __Marshaller_google_cloud_vmwareengine_v1_ListSubnetsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.VmwareEngine.V1.ListSubnetsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.VmwareEngine.V1.ListNodeTypesRequest> __Marshaller_google_cloud_vmwareengine_v1_ListNodeTypesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.VmwareEngine.V1.ListNodeTypesRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.VmwareEngine.V1.ListNodeTypesResponse> __Marshaller_google_cloud_vmwareengine_v1_ListNodeTypesResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.VmwareEngine.V1.ListNodeTypesResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.VmwareEngine.V1.GetNodeTypeRequest> __Marshaller_google_cloud_vmwareengine_v1_GetNodeTypeRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.VmwareEngine.V1.GetNodeTypeRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.VmwareEngine.V1.NodeType> __Marshaller_google_cloud_vmwareengine_v1_NodeType = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.VmwareEngine.V1.NodeType.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.VmwareEngine.V1.ShowNsxCredentialsRequest> __Marshaller_google_cloud_vmwareengine_v1_ShowNsxCredentialsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.VmwareEngine.V1.ShowNsxCredentialsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.VmwareEngine.V1.Credentials> __Marshaller_google_cloud_vmwareengine_v1_Credentials = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.VmwareEngine.V1.Credentials.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.VmwareEngine.V1.ShowVcenterCredentialsRequest> __Marshaller_google_cloud_vmwareengine_v1_ShowVcenterCredentialsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.VmwareEngine.V1.ShowVcenterCredentialsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.VmwareEngine.V1.ResetNsxCredentialsRequest> __Marshaller_google_cloud_vmwareengine_v1_ResetNsxCredentialsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.VmwareEngine.V1.ResetNsxCredentialsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.VmwareEngine.V1.ResetVcenterCredentialsRequest> __Marshaller_google_cloud_vmwareengine_v1_ResetVcenterCredentialsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.VmwareEngine.V1.ResetVcenterCredentialsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.VmwareEngine.V1.CreateHcxActivationKeyRequest> __Marshaller_google_cloud_vmwareengine_v1_CreateHcxActivationKeyRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.VmwareEngine.V1.CreateHcxActivationKeyRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.VmwareEngine.V1.ListHcxActivationKeysRequest> __Marshaller_google_cloud_vmwareengine_v1_ListHcxActivationKeysRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.VmwareEngine.V1.ListHcxActivationKeysRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.VmwareEngine.V1.ListHcxActivationKeysResponse> __Marshaller_google_cloud_vmwareengine_v1_ListHcxActivationKeysResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.VmwareEngine.V1.ListHcxActivationKeysResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.VmwareEngine.V1.GetHcxActivationKeyRequest> __Marshaller_google_cloud_vmwareengine_v1_GetHcxActivationKeyRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.VmwareEngine.V1.GetHcxActivationKeyRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.VmwareEngine.V1.HcxActivationKey> __Marshaller_google_cloud_vmwareengine_v1_HcxActivationKey = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.VmwareEngine.V1.HcxActivationKey.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.VmwareEngine.V1.GetNetworkPolicyRequest> __Marshaller_google_cloud_vmwareengine_v1_GetNetworkPolicyRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.VmwareEngine.V1.GetNetworkPolicyRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.VmwareEngine.V1.NetworkPolicy> __Marshaller_google_cloud_vmwareengine_v1_NetworkPolicy = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.VmwareEngine.V1.NetworkPolicy.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.VmwareEngine.V1.ListNetworkPoliciesRequest> __Marshaller_google_cloud_vmwareengine_v1_ListNetworkPoliciesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.VmwareEngine.V1.ListNetworkPoliciesRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.VmwareEngine.V1.ListNetworkPoliciesResponse> __Marshaller_google_cloud_vmwareengine_v1_ListNetworkPoliciesResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.VmwareEngine.V1.ListNetworkPoliciesResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.VmwareEngine.V1.CreateNetworkPolicyRequest> __Marshaller_google_cloud_vmwareengine_v1_CreateNetworkPolicyRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.VmwareEngine.V1.CreateNetworkPolicyRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.VmwareEngine.V1.UpdateNetworkPolicyRequest> __Marshaller_google_cloud_vmwareengine_v1_UpdateNetworkPolicyRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.VmwareEngine.V1.UpdateNetworkPolicyRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.VmwareEngine.V1.DeleteNetworkPolicyRequest> __Marshaller_google_cloud_vmwareengine_v1_DeleteNetworkPolicyRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.VmwareEngine.V1.DeleteNetworkPolicyRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.VmwareEngine.V1.CreateVmwareEngineNetworkRequest> __Marshaller_google_cloud_vmwareengine_v1_CreateVmwareEngineNetworkRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.VmwareEngine.V1.CreateVmwareEngineNetworkRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.VmwareEngine.V1.UpdateVmwareEngineNetworkRequest> __Marshaller_google_cloud_vmwareengine_v1_UpdateVmwareEngineNetworkRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.VmwareEngine.V1.UpdateVmwareEngineNetworkRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.VmwareEngine.V1.DeleteVmwareEngineNetworkRequest> __Marshaller_google_cloud_vmwareengine_v1_DeleteVmwareEngineNetworkRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.VmwareEngine.V1.DeleteVmwareEngineNetworkRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.VmwareEngine.V1.GetVmwareEngineNetworkRequest> __Marshaller_google_cloud_vmwareengine_v1_GetVmwareEngineNetworkRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.VmwareEngine.V1.GetVmwareEngineNetworkRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.VmwareEngine.V1.VmwareEngineNetwork> __Marshaller_google_cloud_vmwareengine_v1_VmwareEngineNetwork = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.VmwareEngine.V1.VmwareEngineNetwork.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.VmwareEngine.V1.ListVmwareEngineNetworksRequest> __Marshaller_google_cloud_vmwareengine_v1_ListVmwareEngineNetworksRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.VmwareEngine.V1.ListVmwareEngineNetworksRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.VmwareEngine.V1.ListVmwareEngineNetworksResponse> __Marshaller_google_cloud_vmwareengine_v1_ListVmwareEngineNetworksResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.VmwareEngine.V1.ListVmwareEngineNetworksResponse.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.VmwareEngine.V1.ListPrivateCloudsRequest, global::Google.Cloud.VmwareEngine.V1.ListPrivateCloudsResponse> __Method_ListPrivateClouds = new grpc::Method<global::Google.Cloud.VmwareEngine.V1.ListPrivateCloudsRequest, global::Google.Cloud.VmwareEngine.V1.ListPrivateCloudsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListPrivateClouds",
        __Marshaller_google_cloud_vmwareengine_v1_ListPrivateCloudsRequest,
        __Marshaller_google_cloud_vmwareengine_v1_ListPrivateCloudsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.VmwareEngine.V1.GetPrivateCloudRequest, global::Google.Cloud.VmwareEngine.V1.PrivateCloud> __Method_GetPrivateCloud = new grpc::Method<global::Google.Cloud.VmwareEngine.V1.GetPrivateCloudRequest, global::Google.Cloud.VmwareEngine.V1.PrivateCloud>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetPrivateCloud",
        __Marshaller_google_cloud_vmwareengine_v1_GetPrivateCloudRequest,
        __Marshaller_google_cloud_vmwareengine_v1_PrivateCloud);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.VmwareEngine.V1.CreatePrivateCloudRequest, global::Google.LongRunning.Operation> __Method_CreatePrivateCloud = new grpc::Method<global::Google.Cloud.VmwareEngine.V1.CreatePrivateCloudRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreatePrivateCloud",
        __Marshaller_google_cloud_vmwareengine_v1_CreatePrivateCloudRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.VmwareEngine.V1.UpdatePrivateCloudRequest, global::Google.LongRunning.Operation> __Method_UpdatePrivateCloud = new grpc::Method<global::Google.Cloud.VmwareEngine.V1.UpdatePrivateCloudRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdatePrivateCloud",
        __Marshaller_google_cloud_vmwareengine_v1_UpdatePrivateCloudRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.VmwareEngine.V1.DeletePrivateCloudRequest, global::Google.LongRunning.Operation> __Method_DeletePrivateCloud = new grpc::Method<global::Google.Cloud.VmwareEngine.V1.DeletePrivateCloudRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeletePrivateCloud",
        __Marshaller_google_cloud_vmwareengine_v1_DeletePrivateCloudRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.VmwareEngine.V1.UndeletePrivateCloudRequest, global::Google.LongRunning.Operation> __Method_UndeletePrivateCloud = new grpc::Method<global::Google.Cloud.VmwareEngine.V1.UndeletePrivateCloudRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UndeletePrivateCloud",
        __Marshaller_google_cloud_vmwareengine_v1_UndeletePrivateCloudRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.VmwareEngine.V1.ListClustersRequest, global::Google.Cloud.VmwareEngine.V1.ListClustersResponse> __Method_ListClusters = new grpc::Method<global::Google.Cloud.VmwareEngine.V1.ListClustersRequest, global::Google.Cloud.VmwareEngine.V1.ListClustersResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListClusters",
        __Marshaller_google_cloud_vmwareengine_v1_ListClustersRequest,
        __Marshaller_google_cloud_vmwareengine_v1_ListClustersResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.VmwareEngine.V1.GetClusterRequest, global::Google.Cloud.VmwareEngine.V1.Cluster> __Method_GetCluster = new grpc::Method<global::Google.Cloud.VmwareEngine.V1.GetClusterRequest, global::Google.Cloud.VmwareEngine.V1.Cluster>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetCluster",
        __Marshaller_google_cloud_vmwareengine_v1_GetClusterRequest,
        __Marshaller_google_cloud_vmwareengine_v1_Cluster);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.VmwareEngine.V1.CreateClusterRequest, global::Google.LongRunning.Operation> __Method_CreateCluster = new grpc::Method<global::Google.Cloud.VmwareEngine.V1.CreateClusterRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateCluster",
        __Marshaller_google_cloud_vmwareengine_v1_CreateClusterRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.VmwareEngine.V1.UpdateClusterRequest, global::Google.LongRunning.Operation> __Method_UpdateCluster = new grpc::Method<global::Google.Cloud.VmwareEngine.V1.UpdateClusterRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateCluster",
        __Marshaller_google_cloud_vmwareengine_v1_UpdateClusterRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.VmwareEngine.V1.DeleteClusterRequest, global::Google.LongRunning.Operation> __Method_DeleteCluster = new grpc::Method<global::Google.Cloud.VmwareEngine.V1.DeleteClusterRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteCluster",
        __Marshaller_google_cloud_vmwareengine_v1_DeleteClusterRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.VmwareEngine.V1.ListSubnetsRequest, global::Google.Cloud.VmwareEngine.V1.ListSubnetsResponse> __Method_ListSubnets = new grpc::Method<global::Google.Cloud.VmwareEngine.V1.ListSubnetsRequest, global::Google.Cloud.VmwareEngine.V1.ListSubnetsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListSubnets",
        __Marshaller_google_cloud_vmwareengine_v1_ListSubnetsRequest,
        __Marshaller_google_cloud_vmwareengine_v1_ListSubnetsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.VmwareEngine.V1.ListNodeTypesRequest, global::Google.Cloud.VmwareEngine.V1.ListNodeTypesResponse> __Method_ListNodeTypes = new grpc::Method<global::Google.Cloud.VmwareEngine.V1.ListNodeTypesRequest, global::Google.Cloud.VmwareEngine.V1.ListNodeTypesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListNodeTypes",
        __Marshaller_google_cloud_vmwareengine_v1_ListNodeTypesRequest,
        __Marshaller_google_cloud_vmwareengine_v1_ListNodeTypesResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.VmwareEngine.V1.GetNodeTypeRequest, global::Google.Cloud.VmwareEngine.V1.NodeType> __Method_GetNodeType = new grpc::Method<global::Google.Cloud.VmwareEngine.V1.GetNodeTypeRequest, global::Google.Cloud.VmwareEngine.V1.NodeType>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetNodeType",
        __Marshaller_google_cloud_vmwareengine_v1_GetNodeTypeRequest,
        __Marshaller_google_cloud_vmwareengine_v1_NodeType);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.VmwareEngine.V1.ShowNsxCredentialsRequest, global::Google.Cloud.VmwareEngine.V1.Credentials> __Method_ShowNsxCredentials = new grpc::Method<global::Google.Cloud.VmwareEngine.V1.ShowNsxCredentialsRequest, global::Google.Cloud.VmwareEngine.V1.Credentials>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ShowNsxCredentials",
        __Marshaller_google_cloud_vmwareengine_v1_ShowNsxCredentialsRequest,
        __Marshaller_google_cloud_vmwareengine_v1_Credentials);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.VmwareEngine.V1.ShowVcenterCredentialsRequest, global::Google.Cloud.VmwareEngine.V1.Credentials> __Method_ShowVcenterCredentials = new grpc::Method<global::Google.Cloud.VmwareEngine.V1.ShowVcenterCredentialsRequest, global::Google.Cloud.VmwareEngine.V1.Credentials>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ShowVcenterCredentials",
        __Marshaller_google_cloud_vmwareengine_v1_ShowVcenterCredentialsRequest,
        __Marshaller_google_cloud_vmwareengine_v1_Credentials);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.VmwareEngine.V1.ResetNsxCredentialsRequest, global::Google.LongRunning.Operation> __Method_ResetNsxCredentials = new grpc::Method<global::Google.Cloud.VmwareEngine.V1.ResetNsxCredentialsRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ResetNsxCredentials",
        __Marshaller_google_cloud_vmwareengine_v1_ResetNsxCredentialsRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.VmwareEngine.V1.ResetVcenterCredentialsRequest, global::Google.LongRunning.Operation> __Method_ResetVcenterCredentials = new grpc::Method<global::Google.Cloud.VmwareEngine.V1.ResetVcenterCredentialsRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ResetVcenterCredentials",
        __Marshaller_google_cloud_vmwareengine_v1_ResetVcenterCredentialsRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.VmwareEngine.V1.CreateHcxActivationKeyRequest, global::Google.LongRunning.Operation> __Method_CreateHcxActivationKey = new grpc::Method<global::Google.Cloud.VmwareEngine.V1.CreateHcxActivationKeyRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateHcxActivationKey",
        __Marshaller_google_cloud_vmwareengine_v1_CreateHcxActivationKeyRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.VmwareEngine.V1.ListHcxActivationKeysRequest, global::Google.Cloud.VmwareEngine.V1.ListHcxActivationKeysResponse> __Method_ListHcxActivationKeys = new grpc::Method<global::Google.Cloud.VmwareEngine.V1.ListHcxActivationKeysRequest, global::Google.Cloud.VmwareEngine.V1.ListHcxActivationKeysResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListHcxActivationKeys",
        __Marshaller_google_cloud_vmwareengine_v1_ListHcxActivationKeysRequest,
        __Marshaller_google_cloud_vmwareengine_v1_ListHcxActivationKeysResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.VmwareEngine.V1.GetHcxActivationKeyRequest, global::Google.Cloud.VmwareEngine.V1.HcxActivationKey> __Method_GetHcxActivationKey = new grpc::Method<global::Google.Cloud.VmwareEngine.V1.GetHcxActivationKeyRequest, global::Google.Cloud.VmwareEngine.V1.HcxActivationKey>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetHcxActivationKey",
        __Marshaller_google_cloud_vmwareengine_v1_GetHcxActivationKeyRequest,
        __Marshaller_google_cloud_vmwareengine_v1_HcxActivationKey);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.VmwareEngine.V1.GetNetworkPolicyRequest, global::Google.Cloud.VmwareEngine.V1.NetworkPolicy> __Method_GetNetworkPolicy = new grpc::Method<global::Google.Cloud.VmwareEngine.V1.GetNetworkPolicyRequest, global::Google.Cloud.VmwareEngine.V1.NetworkPolicy>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetNetworkPolicy",
        __Marshaller_google_cloud_vmwareengine_v1_GetNetworkPolicyRequest,
        __Marshaller_google_cloud_vmwareengine_v1_NetworkPolicy);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.VmwareEngine.V1.ListNetworkPoliciesRequest, global::Google.Cloud.VmwareEngine.V1.ListNetworkPoliciesResponse> __Method_ListNetworkPolicies = new grpc::Method<global::Google.Cloud.VmwareEngine.V1.ListNetworkPoliciesRequest, global::Google.Cloud.VmwareEngine.V1.ListNetworkPoliciesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListNetworkPolicies",
        __Marshaller_google_cloud_vmwareengine_v1_ListNetworkPoliciesRequest,
        __Marshaller_google_cloud_vmwareengine_v1_ListNetworkPoliciesResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.VmwareEngine.V1.CreateNetworkPolicyRequest, global::Google.LongRunning.Operation> __Method_CreateNetworkPolicy = new grpc::Method<global::Google.Cloud.VmwareEngine.V1.CreateNetworkPolicyRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateNetworkPolicy",
        __Marshaller_google_cloud_vmwareengine_v1_CreateNetworkPolicyRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.VmwareEngine.V1.UpdateNetworkPolicyRequest, global::Google.LongRunning.Operation> __Method_UpdateNetworkPolicy = new grpc::Method<global::Google.Cloud.VmwareEngine.V1.UpdateNetworkPolicyRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateNetworkPolicy",
        __Marshaller_google_cloud_vmwareengine_v1_UpdateNetworkPolicyRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.VmwareEngine.V1.DeleteNetworkPolicyRequest, global::Google.LongRunning.Operation> __Method_DeleteNetworkPolicy = new grpc::Method<global::Google.Cloud.VmwareEngine.V1.DeleteNetworkPolicyRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteNetworkPolicy",
        __Marshaller_google_cloud_vmwareengine_v1_DeleteNetworkPolicyRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.VmwareEngine.V1.CreateVmwareEngineNetworkRequest, global::Google.LongRunning.Operation> __Method_CreateVmwareEngineNetwork = new grpc::Method<global::Google.Cloud.VmwareEngine.V1.CreateVmwareEngineNetworkRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateVmwareEngineNetwork",
        __Marshaller_google_cloud_vmwareengine_v1_CreateVmwareEngineNetworkRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.VmwareEngine.V1.UpdateVmwareEngineNetworkRequest, global::Google.LongRunning.Operation> __Method_UpdateVmwareEngineNetwork = new grpc::Method<global::Google.Cloud.VmwareEngine.V1.UpdateVmwareEngineNetworkRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateVmwareEngineNetwork",
        __Marshaller_google_cloud_vmwareengine_v1_UpdateVmwareEngineNetworkRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.VmwareEngine.V1.DeleteVmwareEngineNetworkRequest, global::Google.LongRunning.Operation> __Method_DeleteVmwareEngineNetwork = new grpc::Method<global::Google.Cloud.VmwareEngine.V1.DeleteVmwareEngineNetworkRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteVmwareEngineNetwork",
        __Marshaller_google_cloud_vmwareengine_v1_DeleteVmwareEngineNetworkRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.VmwareEngine.V1.GetVmwareEngineNetworkRequest, global::Google.Cloud.VmwareEngine.V1.VmwareEngineNetwork> __Method_GetVmwareEngineNetwork = new grpc::Method<global::Google.Cloud.VmwareEngine.V1.GetVmwareEngineNetworkRequest, global::Google.Cloud.VmwareEngine.V1.VmwareEngineNetwork>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetVmwareEngineNetwork",
        __Marshaller_google_cloud_vmwareengine_v1_GetVmwareEngineNetworkRequest,
        __Marshaller_google_cloud_vmwareengine_v1_VmwareEngineNetwork);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.VmwareEngine.V1.ListVmwareEngineNetworksRequest, global::Google.Cloud.VmwareEngine.V1.ListVmwareEngineNetworksResponse> __Method_ListVmwareEngineNetworks = new grpc::Method<global::Google.Cloud.VmwareEngine.V1.ListVmwareEngineNetworksRequest, global::Google.Cloud.VmwareEngine.V1.ListVmwareEngineNetworksResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListVmwareEngineNetworks",
        __Marshaller_google_cloud_vmwareengine_v1_ListVmwareEngineNetworksRequest,
        __Marshaller_google_cloud_vmwareengine_v1_ListVmwareEngineNetworksResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Google.Cloud.VmwareEngine.V1.VmwareengineReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of VmwareEngine</summary>
    [grpc::BindServiceMethod(typeof(VmwareEngine), "BindService")]
    public abstract partial class VmwareEngineBase
    {
      /// <summary>
      /// Lists `PrivateCloud` resources in a given project and location.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.VmwareEngine.V1.ListPrivateCloudsResponse> ListPrivateClouds(global::Google.Cloud.VmwareEngine.V1.ListPrivateCloudsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves a `PrivateCloud` resource by its resource name.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.VmwareEngine.V1.PrivateCloud> GetPrivateCloud(global::Google.Cloud.VmwareEngine.V1.GetPrivateCloudRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Creates a new `PrivateCloud` resource in a given project and location.
      /// Private clouds can only be created in zones, regional private clouds are
      /// not supported.
      ///
      /// Creating a private cloud also creates a [management
      /// cluster](https://cloud.google.com/vmware-engine/docs/concepts-vmware-components)
      /// for that private cloud.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> CreatePrivateCloud(global::Google.Cloud.VmwareEngine.V1.CreatePrivateCloudRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Modifies a `PrivateCloud` resource. Only the following fields can be
      /// updated: `description`.
      /// Only fields specified in `updateMask` are applied.
      ///
      /// During operation processing, the resource is temporarily in the `ACTIVE`
      /// state before the operation fully completes. For that period of time, you
      /// can't update the resource. Use the operation status to determine when the
      /// processing fully completes.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> UpdatePrivateCloud(global::Google.Cloud.VmwareEngine.V1.UpdatePrivateCloudRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Schedules a `PrivateCloud` resource for deletion.
      ///
      /// A `PrivateCloud` resource scheduled for deletion has `PrivateCloud.state`
      /// set to `DELETED` and `expireTime` set to the time when deletion is final
      /// and can no longer be reversed. The delete operation is marked as done
      /// as soon as the `PrivateCloud` is successfully scheduled for deletion
      /// (this also applies when `delayHours` is set to zero), and the operation is
      /// not kept in pending state until `PrivateCloud` is purged.
      /// `PrivateCloud` can be restored using `UndeletePrivateCloud` method before
      /// the `expireTime` elapses. When `expireTime` is reached, deletion is final
      /// and all private cloud resources are irreversibly removed and billing stops.
      /// During the final removal process, `PrivateCloud.state` is set to `PURGING`.
      /// `PrivateCloud` can be polled using standard `GET` method for the whole
      /// period of deletion and purging. It will not be returned only
      /// when it is completely purged.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> DeletePrivateCloud(global::Google.Cloud.VmwareEngine.V1.DeletePrivateCloudRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Restores a private cloud that was previously scheduled for deletion by
      /// `DeletePrivateCloud`. A `PrivateCloud` resource scheduled for deletion has
      /// `PrivateCloud.state` set to `DELETED` and `PrivateCloud.expireTime` set to
      /// the time when deletion can no longer be reversed.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> UndeletePrivateCloud(global::Google.Cloud.VmwareEngine.V1.UndeletePrivateCloudRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Lists `Cluster` resources in a given private cloud.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.VmwareEngine.V1.ListClustersResponse> ListClusters(global::Google.Cloud.VmwareEngine.V1.ListClustersRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves a `Cluster` resource by its resource name.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.VmwareEngine.V1.Cluster> GetCluster(global::Google.Cloud.VmwareEngine.V1.GetClusterRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Creates a new cluster in a given private cloud.
      /// Creating a new cluster provides additional nodes for
      /// use in the parent private cloud and requires sufficient [node
      /// quota](https://cloud.google.com/vmware-engine/quotas).
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> CreateCluster(global::Google.Cloud.VmwareEngine.V1.CreateClusterRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Modifies a `Cluster` resource. Only the following fields can be updated:
      /// `node_type_configs.*.node_count`. Only fields specified in `updateMask` are
      /// applied.
      ///
      /// During operation processing, the resource is temporarily in the `ACTIVE`
      /// state before the operation fully completes. For that period of time, you
      /// can't update the resource. Use the operation status to determine when the
      /// processing fully completes.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> UpdateCluster(global::Google.Cloud.VmwareEngine.V1.UpdateClusterRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Deletes a `Cluster` resource. To avoid unintended data loss, migrate or
      /// gracefully shut down any workloads running on the cluster before deletion.
      /// You cannot delete the management cluster of a private cloud using this
      /// method.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> DeleteCluster(global::Google.Cloud.VmwareEngine.V1.DeleteClusterRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Lists subnets in a given private cloud.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.VmwareEngine.V1.ListSubnetsResponse> ListSubnets(global::Google.Cloud.VmwareEngine.V1.ListSubnetsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Lists node types
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.VmwareEngine.V1.ListNodeTypesResponse> ListNodeTypes(global::Google.Cloud.VmwareEngine.V1.ListNodeTypesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Gets details of a single `NodeType`.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.VmwareEngine.V1.NodeType> GetNodeType(global::Google.Cloud.VmwareEngine.V1.GetNodeTypeRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Gets details of credentials for NSX appliance.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.VmwareEngine.V1.Credentials> ShowNsxCredentials(global::Google.Cloud.VmwareEngine.V1.ShowNsxCredentialsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Gets details of credentials for Vcenter appliance.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.VmwareEngine.V1.Credentials> ShowVcenterCredentials(global::Google.Cloud.VmwareEngine.V1.ShowVcenterCredentialsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Resets credentials of the NSX appliance.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> ResetNsxCredentials(global::Google.Cloud.VmwareEngine.V1.ResetNsxCredentialsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Resets credentials of the Vcenter appliance.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> ResetVcenterCredentials(global::Google.Cloud.VmwareEngine.V1.ResetVcenterCredentialsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Creates a new HCX activation key in a given private cloud.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> CreateHcxActivationKey(global::Google.Cloud.VmwareEngine.V1.CreateHcxActivationKeyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Lists `HcxActivationKey` resources in a given private cloud.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.VmwareEngine.V1.ListHcxActivationKeysResponse> ListHcxActivationKeys(global::Google.Cloud.VmwareEngine.V1.ListHcxActivationKeysRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves a `HcxActivationKey` resource by its resource name.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.VmwareEngine.V1.HcxActivationKey> GetHcxActivationKey(global::Google.Cloud.VmwareEngine.V1.GetHcxActivationKeyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves a `NetworkPolicy` resource by its resource name.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.VmwareEngine.V1.NetworkPolicy> GetNetworkPolicy(global::Google.Cloud.VmwareEngine.V1.GetNetworkPolicyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Lists `NetworkPolicy` resources in a specified project and location.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.VmwareEngine.V1.ListNetworkPoliciesResponse> ListNetworkPolicies(global::Google.Cloud.VmwareEngine.V1.ListNetworkPoliciesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Creates a new network policy in a given VMware Engine network of a
      /// project and location (region). A new network policy cannot be created if
      /// another network policy already exists in the same scope.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> CreateNetworkPolicy(global::Google.Cloud.VmwareEngine.V1.CreateNetworkPolicyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Modifies a `NetworkPolicy` resource. Only the following fields can be
      /// updated: `internet_access`, `external_ip`, `edge_services_cidr`.
      /// Only fields specified in `updateMask` are applied. When updating a network
      /// policy, the external IP network service can only be disabled if there are
      /// no external IP addresses present in the scope of the policy. Also, a
      /// `NetworkService` cannot be updated when `NetworkService.state` is set
      /// to `RECONCILING`.
      ///
      /// During operation processing, the resource is temporarily in the `ACTIVE`
      /// state before the operation fully completes. For that period of time, you
      /// can't update the resource. Use the operation status to determine when the
      /// processing fully completes.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> UpdateNetworkPolicy(global::Google.Cloud.VmwareEngine.V1.UpdateNetworkPolicyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Deletes a `NetworkPolicy` resource. A network policy cannot be deleted
      /// when `NetworkService.state` is set to `RECONCILING` for either its external
      /// IP or internet access service.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> DeleteNetworkPolicy(global::Google.Cloud.VmwareEngine.V1.DeleteNetworkPolicyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Creates a new VMware Engine network that can be used by a private cloud.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> CreateVmwareEngineNetwork(global::Google.Cloud.VmwareEngine.V1.CreateVmwareEngineNetworkRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Modifies a VMware Engine network resource. Only the following fields can be
      /// updated: `description`. Only fields specified in `updateMask` are
      /// applied.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> UpdateVmwareEngineNetwork(global::Google.Cloud.VmwareEngine.V1.UpdateVmwareEngineNetworkRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Deletes a `VmwareEngineNetwork` resource. You can only delete a VMware
      /// Engine network after all resources that refer to it are deleted. For
      /// example, a private cloud, a network peering, and a network policy can all
      /// refer to the same VMware Engine network.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> DeleteVmwareEngineNetwork(global::Google.Cloud.VmwareEngine.V1.DeleteVmwareEngineNetworkRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves a `VmwareEngineNetwork` resource by its resource name. The
      /// resource contains details of the VMware Engine network, such as its VMware
      /// Engine network type, peered networks in a service project, and state
      /// (for example, `CREATING`, `ACTIVE`, `DELETING`).
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.VmwareEngine.V1.VmwareEngineNetwork> GetVmwareEngineNetwork(global::Google.Cloud.VmwareEngine.V1.GetVmwareEngineNetworkRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Lists `VmwareEngineNetwork` resources in a given project and location.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.VmwareEngine.V1.ListVmwareEngineNetworksResponse> ListVmwareEngineNetworks(global::Google.Cloud.VmwareEngine.V1.ListVmwareEngineNetworksRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for VmwareEngine</summary>
    public partial class VmwareEngineClient : grpc::ClientBase<VmwareEngineClient>
    {
      /// <summary>Creates a new client for VmwareEngine</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public VmwareEngineClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for VmwareEngine that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public VmwareEngineClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected VmwareEngineClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected VmwareEngineClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Lists `PrivateCloud` resources in a given project and location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.VmwareEngine.V1.ListPrivateCloudsResponse ListPrivateClouds(global::Google.Cloud.VmwareEngine.V1.ListPrivateCloudsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListPrivateClouds(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists `PrivateCloud` resources in a given project and location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.VmwareEngine.V1.ListPrivateCloudsResponse ListPrivateClouds(global::Google.Cloud.VmwareEngine.V1.ListPrivateCloudsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListPrivateClouds, null, options, request);
      }
      /// <summary>
      /// Lists `PrivateCloud` resources in a given project and location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.VmwareEngine.V1.ListPrivateCloudsResponse> ListPrivateCloudsAsync(global::Google.Cloud.VmwareEngine.V1.ListPrivateCloudsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListPrivateCloudsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists `PrivateCloud` resources in a given project and location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.VmwareEngine.V1.ListPrivateCloudsResponse> ListPrivateCloudsAsync(global::Google.Cloud.VmwareEngine.V1.ListPrivateCloudsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListPrivateClouds, null, options, request);
      }
      /// <summary>
      /// Retrieves a `PrivateCloud` resource by its resource name.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.VmwareEngine.V1.PrivateCloud GetPrivateCloud(global::Google.Cloud.VmwareEngine.V1.GetPrivateCloudRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetPrivateCloud(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves a `PrivateCloud` resource by its resource name.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.VmwareEngine.V1.PrivateCloud GetPrivateCloud(global::Google.Cloud.VmwareEngine.V1.GetPrivateCloudRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetPrivateCloud, null, options, request);
      }
      /// <summary>
      /// Retrieves a `PrivateCloud` resource by its resource name.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.VmwareEngine.V1.PrivateCloud> GetPrivateCloudAsync(global::Google.Cloud.VmwareEngine.V1.GetPrivateCloudRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetPrivateCloudAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves a `PrivateCloud` resource by its resource name.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.VmwareEngine.V1.PrivateCloud> GetPrivateCloudAsync(global::Google.Cloud.VmwareEngine.V1.GetPrivateCloudRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetPrivateCloud, null, options, request);
      }
      /// <summary>
      /// Creates a new `PrivateCloud` resource in a given project and location.
      /// Private clouds can only be created in zones, regional private clouds are
      /// not supported.
      ///
      /// Creating a private cloud also creates a [management
      /// cluster](https://cloud.google.com/vmware-engine/docs/concepts-vmware-components)
      /// for that private cloud.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation CreatePrivateCloud(global::Google.Cloud.VmwareEngine.V1.CreatePrivateCloudRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreatePrivateCloud(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a new `PrivateCloud` resource in a given project and location.
      /// Private clouds can only be created in zones, regional private clouds are
      /// not supported.
      ///
      /// Creating a private cloud also creates a [management
      /// cluster](https://cloud.google.com/vmware-engine/docs/concepts-vmware-components)
      /// for that private cloud.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation CreatePrivateCloud(global::Google.Cloud.VmwareEngine.V1.CreatePrivateCloudRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreatePrivateCloud, null, options, request);
      }
      /// <summary>
      /// Creates a new `PrivateCloud` resource in a given project and location.
      /// Private clouds can only be created in zones, regional private clouds are
      /// not supported.
      ///
      /// Creating a private cloud also creates a [management
      /// cluster](https://cloud.google.com/vmware-engine/docs/concepts-vmware-components)
      /// for that private cloud.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> CreatePrivateCloudAsync(global::Google.Cloud.VmwareEngine.V1.CreatePrivateCloudRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreatePrivateCloudAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a new `PrivateCloud` resource in a given project and location.
      /// Private clouds can only be created in zones, regional private clouds are
      /// not supported.
      ///
      /// Creating a private cloud also creates a [management
      /// cluster](https://cloud.google.com/vmware-engine/docs/concepts-vmware-components)
      /// for that private cloud.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> CreatePrivateCloudAsync(global::Google.Cloud.VmwareEngine.V1.CreatePrivateCloudRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreatePrivateCloud, null, options, request);
      }
      /// <summary>
      /// Modifies a `PrivateCloud` resource. Only the following fields can be
      /// updated: `description`.
      /// Only fields specified in `updateMask` are applied.
      ///
      /// During operation processing, the resource is temporarily in the `ACTIVE`
      /// state before the operation fully completes. For that period of time, you
      /// can't update the resource. Use the operation status to determine when the
      /// processing fully completes.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation UpdatePrivateCloud(global::Google.Cloud.VmwareEngine.V1.UpdatePrivateCloudRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdatePrivateCloud(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Modifies a `PrivateCloud` resource. Only the following fields can be
      /// updated: `description`.
      /// Only fields specified in `updateMask` are applied.
      ///
      /// During operation processing, the resource is temporarily in the `ACTIVE`
      /// state before the operation fully completes. For that period of time, you
      /// can't update the resource. Use the operation status to determine when the
      /// processing fully completes.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation UpdatePrivateCloud(global::Google.Cloud.VmwareEngine.V1.UpdatePrivateCloudRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdatePrivateCloud, null, options, request);
      }
      /// <summary>
      /// Modifies a `PrivateCloud` resource. Only the following fields can be
      /// updated: `description`.
      /// Only fields specified in `updateMask` are applied.
      ///
      /// During operation processing, the resource is temporarily in the `ACTIVE`
      /// state before the operation fully completes. For that period of time, you
      /// can't update the resource. Use the operation status to determine when the
      /// processing fully completes.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> UpdatePrivateCloudAsync(global::Google.Cloud.VmwareEngine.V1.UpdatePrivateCloudRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdatePrivateCloudAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Modifies a `PrivateCloud` resource. Only the following fields can be
      /// updated: `description`.
      /// Only fields specified in `updateMask` are applied.
      ///
      /// During operation processing, the resource is temporarily in the `ACTIVE`
      /// state before the operation fully completes. For that period of time, you
      /// can't update the resource. Use the operation status to determine when the
      /// processing fully completes.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> UpdatePrivateCloudAsync(global::Google.Cloud.VmwareEngine.V1.UpdatePrivateCloudRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdatePrivateCloud, null, options, request);
      }
      /// <summary>
      /// Schedules a `PrivateCloud` resource for deletion.
      ///
      /// A `PrivateCloud` resource scheduled for deletion has `PrivateCloud.state`
      /// set to `DELETED` and `expireTime` set to the time when deletion is final
      /// and can no longer be reversed. The delete operation is marked as done
      /// as soon as the `PrivateCloud` is successfully scheduled for deletion
      /// (this also applies when `delayHours` is set to zero), and the operation is
      /// not kept in pending state until `PrivateCloud` is purged.
      /// `PrivateCloud` can be restored using `UndeletePrivateCloud` method before
      /// the `expireTime` elapses. When `expireTime` is reached, deletion is final
      /// and all private cloud resources are irreversibly removed and billing stops.
      /// During the final removal process, `PrivateCloud.state` is set to `PURGING`.
      /// `PrivateCloud` can be polled using standard `GET` method for the whole
      /// period of deletion and purging. It will not be returned only
      /// when it is completely purged.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation DeletePrivateCloud(global::Google.Cloud.VmwareEngine.V1.DeletePrivateCloudRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeletePrivateCloud(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Schedules a `PrivateCloud` resource for deletion.
      ///
      /// A `PrivateCloud` resource scheduled for deletion has `PrivateCloud.state`
      /// set to `DELETED` and `expireTime` set to the time when deletion is final
      /// and can no longer be reversed. The delete operation is marked as done
      /// as soon as the `PrivateCloud` is successfully scheduled for deletion
      /// (this also applies when `delayHours` is set to zero), and the operation is
      /// not kept in pending state until `PrivateCloud` is purged.
      /// `PrivateCloud` can be restored using `UndeletePrivateCloud` method before
      /// the `expireTime` elapses. When `expireTime` is reached, deletion is final
      /// and all private cloud resources are irreversibly removed and billing stops.
      /// During the final removal process, `PrivateCloud.state` is set to `PURGING`.
      /// `PrivateCloud` can be polled using standard `GET` method for the whole
      /// period of deletion and purging. It will not be returned only
      /// when it is completely purged.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation DeletePrivateCloud(global::Google.Cloud.VmwareEngine.V1.DeletePrivateCloudRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeletePrivateCloud, null, options, request);
      }
      /// <summary>
      /// Schedules a `PrivateCloud` resource for deletion.
      ///
      /// A `PrivateCloud` resource scheduled for deletion has `PrivateCloud.state`
      /// set to `DELETED` and `expireTime` set to the time when deletion is final
      /// and can no longer be reversed. The delete operation is marked as done
      /// as soon as the `PrivateCloud` is successfully scheduled for deletion
      /// (this also applies when `delayHours` is set to zero), and the operation is
      /// not kept in pending state until `PrivateCloud` is purged.
      /// `PrivateCloud` can be restored using `UndeletePrivateCloud` method before
      /// the `expireTime` elapses. When `expireTime` is reached, deletion is final
      /// and all private cloud resources are irreversibly removed and billing stops.
      /// During the final removal process, `PrivateCloud.state` is set to `PURGING`.
      /// `PrivateCloud` can be polled using standard `GET` method for the whole
      /// period of deletion and purging. It will not be returned only
      /// when it is completely purged.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> DeletePrivateCloudAsync(global::Google.Cloud.VmwareEngine.V1.DeletePrivateCloudRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeletePrivateCloudAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Schedules a `PrivateCloud` resource for deletion.
      ///
      /// A `PrivateCloud` resource scheduled for deletion has `PrivateCloud.state`
      /// set to `DELETED` and `expireTime` set to the time when deletion is final
      /// and can no longer be reversed. The delete operation is marked as done
      /// as soon as the `PrivateCloud` is successfully scheduled for deletion
      /// (this also applies when `delayHours` is set to zero), and the operation is
      /// not kept in pending state until `PrivateCloud` is purged.
      /// `PrivateCloud` can be restored using `UndeletePrivateCloud` method before
      /// the `expireTime` elapses. When `expireTime` is reached, deletion is final
      /// and all private cloud resources are irreversibly removed and billing stops.
      /// During the final removal process, `PrivateCloud.state` is set to `PURGING`.
      /// `PrivateCloud` can be polled using standard `GET` method for the whole
      /// period of deletion and purging. It will not be returned only
      /// when it is completely purged.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> DeletePrivateCloudAsync(global::Google.Cloud.VmwareEngine.V1.DeletePrivateCloudRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeletePrivateCloud, null, options, request);
      }
      /// <summary>
      /// Restores a private cloud that was previously scheduled for deletion by
      /// `DeletePrivateCloud`. A `PrivateCloud` resource scheduled for deletion has
      /// `PrivateCloud.state` set to `DELETED` and `PrivateCloud.expireTime` set to
      /// the time when deletion can no longer be reversed.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation UndeletePrivateCloud(global::Google.Cloud.VmwareEngine.V1.UndeletePrivateCloudRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UndeletePrivateCloud(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Restores a private cloud that was previously scheduled for deletion by
      /// `DeletePrivateCloud`. A `PrivateCloud` resource scheduled for deletion has
      /// `PrivateCloud.state` set to `DELETED` and `PrivateCloud.expireTime` set to
      /// the time when deletion can no longer be reversed.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation UndeletePrivateCloud(global::Google.Cloud.VmwareEngine.V1.UndeletePrivateCloudRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UndeletePrivateCloud, null, options, request);
      }
      /// <summary>
      /// Restores a private cloud that was previously scheduled for deletion by
      /// `DeletePrivateCloud`. A `PrivateCloud` resource scheduled for deletion has
      /// `PrivateCloud.state` set to `DELETED` and `PrivateCloud.expireTime` set to
      /// the time when deletion can no longer be reversed.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> UndeletePrivateCloudAsync(global::Google.Cloud.VmwareEngine.V1.UndeletePrivateCloudRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UndeletePrivateCloudAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Restores a private cloud that was previously scheduled for deletion by
      /// `DeletePrivateCloud`. A `PrivateCloud` resource scheduled for deletion has
      /// `PrivateCloud.state` set to `DELETED` and `PrivateCloud.expireTime` set to
      /// the time when deletion can no longer be reversed.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> UndeletePrivateCloudAsync(global::Google.Cloud.VmwareEngine.V1.UndeletePrivateCloudRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UndeletePrivateCloud, null, options, request);
      }
      /// <summary>
      /// Lists `Cluster` resources in a given private cloud.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.VmwareEngine.V1.ListClustersResponse ListClusters(global::Google.Cloud.VmwareEngine.V1.ListClustersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListClusters(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists `Cluster` resources in a given private cloud.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.VmwareEngine.V1.ListClustersResponse ListClusters(global::Google.Cloud.VmwareEngine.V1.ListClustersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListClusters, null, options, request);
      }
      /// <summary>
      /// Lists `Cluster` resources in a given private cloud.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.VmwareEngine.V1.ListClustersResponse> ListClustersAsync(global::Google.Cloud.VmwareEngine.V1.ListClustersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListClustersAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists `Cluster` resources in a given private cloud.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.VmwareEngine.V1.ListClustersResponse> ListClustersAsync(global::Google.Cloud.VmwareEngine.V1.ListClustersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListClusters, null, options, request);
      }
      /// <summary>
      /// Retrieves a `Cluster` resource by its resource name.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.VmwareEngine.V1.Cluster GetCluster(global::Google.Cloud.VmwareEngine.V1.GetClusterRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetCluster(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves a `Cluster` resource by its resource name.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.VmwareEngine.V1.Cluster GetCluster(global::Google.Cloud.VmwareEngine.V1.GetClusterRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetCluster, null, options, request);
      }
      /// <summary>
      /// Retrieves a `Cluster` resource by its resource name.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.VmwareEngine.V1.Cluster> GetClusterAsync(global::Google.Cloud.VmwareEngine.V1.GetClusterRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetClusterAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves a `Cluster` resource by its resource name.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.VmwareEngine.V1.Cluster> GetClusterAsync(global::Google.Cloud.VmwareEngine.V1.GetClusterRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetCluster, null, options, request);
      }
      /// <summary>
      /// Creates a new cluster in a given private cloud.
      /// Creating a new cluster provides additional nodes for
      /// use in the parent private cloud and requires sufficient [node
      /// quota](https://cloud.google.com/vmware-engine/quotas).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation CreateCluster(global::Google.Cloud.VmwareEngine.V1.CreateClusterRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateCluster(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a new cluster in a given private cloud.
      /// Creating a new cluster provides additional nodes for
      /// use in the parent private cloud and requires sufficient [node
      /// quota](https://cloud.google.com/vmware-engine/quotas).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation CreateCluster(global::Google.Cloud.VmwareEngine.V1.CreateClusterRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateCluster, null, options, request);
      }
      /// <summary>
      /// Creates a new cluster in a given private cloud.
      /// Creating a new cluster provides additional nodes for
      /// use in the parent private cloud and requires sufficient [node
      /// quota](https://cloud.google.com/vmware-engine/quotas).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> CreateClusterAsync(global::Google.Cloud.VmwareEngine.V1.CreateClusterRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateClusterAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a new cluster in a given private cloud.
      /// Creating a new cluster provides additional nodes for
      /// use in the parent private cloud and requires sufficient [node
      /// quota](https://cloud.google.com/vmware-engine/quotas).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> CreateClusterAsync(global::Google.Cloud.VmwareEngine.V1.CreateClusterRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateCluster, null, options, request);
      }
      /// <summary>
      /// Modifies a `Cluster` resource. Only the following fields can be updated:
      /// `node_type_configs.*.node_count`. Only fields specified in `updateMask` are
      /// applied.
      ///
      /// During operation processing, the resource is temporarily in the `ACTIVE`
      /// state before the operation fully completes. For that period of time, you
      /// can't update the resource. Use the operation status to determine when the
      /// processing fully completes.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation UpdateCluster(global::Google.Cloud.VmwareEngine.V1.UpdateClusterRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateCluster(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Modifies a `Cluster` resource. Only the following fields can be updated:
      /// `node_type_configs.*.node_count`. Only fields specified in `updateMask` are
      /// applied.
      ///
      /// During operation processing, the resource is temporarily in the `ACTIVE`
      /// state before the operation fully completes. For that period of time, you
      /// can't update the resource. Use the operation status to determine when the
      /// processing fully completes.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation UpdateCluster(global::Google.Cloud.VmwareEngine.V1.UpdateClusterRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateCluster, null, options, request);
      }
      /// <summary>
      /// Modifies a `Cluster` resource. Only the following fields can be updated:
      /// `node_type_configs.*.node_count`. Only fields specified in `updateMask` are
      /// applied.
      ///
      /// During operation processing, the resource is temporarily in the `ACTIVE`
      /// state before the operation fully completes. For that period of time, you
      /// can't update the resource. Use the operation status to determine when the
      /// processing fully completes.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> UpdateClusterAsync(global::Google.Cloud.VmwareEngine.V1.UpdateClusterRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateClusterAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Modifies a `Cluster` resource. Only the following fields can be updated:
      /// `node_type_configs.*.node_count`. Only fields specified in `updateMask` are
      /// applied.
      ///
      /// During operation processing, the resource is temporarily in the `ACTIVE`
      /// state before the operation fully completes. For that period of time, you
      /// can't update the resource. Use the operation status to determine when the
      /// processing fully completes.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> UpdateClusterAsync(global::Google.Cloud.VmwareEngine.V1.UpdateClusterRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateCluster, null, options, request);
      }
      /// <summary>
      /// Deletes a `Cluster` resource. To avoid unintended data loss, migrate or
      /// gracefully shut down any workloads running on the cluster before deletion.
      /// You cannot delete the management cluster of a private cloud using this
      /// method.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation DeleteCluster(global::Google.Cloud.VmwareEngine.V1.DeleteClusterRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteCluster(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes a `Cluster` resource. To avoid unintended data loss, migrate or
      /// gracefully shut down any workloads running on the cluster before deletion.
      /// You cannot delete the management cluster of a private cloud using this
      /// method.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation DeleteCluster(global::Google.Cloud.VmwareEngine.V1.DeleteClusterRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteCluster, null, options, request);
      }
      /// <summary>
      /// Deletes a `Cluster` resource. To avoid unintended data loss, migrate or
      /// gracefully shut down any workloads running on the cluster before deletion.
      /// You cannot delete the management cluster of a private cloud using this
      /// method.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> DeleteClusterAsync(global::Google.Cloud.VmwareEngine.V1.DeleteClusterRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteClusterAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes a `Cluster` resource. To avoid unintended data loss, migrate or
      /// gracefully shut down any workloads running on the cluster before deletion.
      /// You cannot delete the management cluster of a private cloud using this
      /// method.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> DeleteClusterAsync(global::Google.Cloud.VmwareEngine.V1.DeleteClusterRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteCluster, null, options, request);
      }
      /// <summary>
      /// Lists subnets in a given private cloud.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.VmwareEngine.V1.ListSubnetsResponse ListSubnets(global::Google.Cloud.VmwareEngine.V1.ListSubnetsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListSubnets(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists subnets in a given private cloud.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.VmwareEngine.V1.ListSubnetsResponse ListSubnets(global::Google.Cloud.VmwareEngine.V1.ListSubnetsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListSubnets, null, options, request);
      }
      /// <summary>
      /// Lists subnets in a given private cloud.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.VmwareEngine.V1.ListSubnetsResponse> ListSubnetsAsync(global::Google.Cloud.VmwareEngine.V1.ListSubnetsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListSubnetsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists subnets in a given private cloud.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.VmwareEngine.V1.ListSubnetsResponse> ListSubnetsAsync(global::Google.Cloud.VmwareEngine.V1.ListSubnetsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListSubnets, null, options, request);
      }
      /// <summary>
      /// Lists node types
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.VmwareEngine.V1.ListNodeTypesResponse ListNodeTypes(global::Google.Cloud.VmwareEngine.V1.ListNodeTypesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListNodeTypes(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists node types
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.VmwareEngine.V1.ListNodeTypesResponse ListNodeTypes(global::Google.Cloud.VmwareEngine.V1.ListNodeTypesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListNodeTypes, null, options, request);
      }
      /// <summary>
      /// Lists node types
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.VmwareEngine.V1.ListNodeTypesResponse> ListNodeTypesAsync(global::Google.Cloud.VmwareEngine.V1.ListNodeTypesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListNodeTypesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists node types
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.VmwareEngine.V1.ListNodeTypesResponse> ListNodeTypesAsync(global::Google.Cloud.VmwareEngine.V1.ListNodeTypesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListNodeTypes, null, options, request);
      }
      /// <summary>
      /// Gets details of a single `NodeType`.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.VmwareEngine.V1.NodeType GetNodeType(global::Google.Cloud.VmwareEngine.V1.GetNodeTypeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetNodeType(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets details of a single `NodeType`.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.VmwareEngine.V1.NodeType GetNodeType(global::Google.Cloud.VmwareEngine.V1.GetNodeTypeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetNodeType, null, options, request);
      }
      /// <summary>
      /// Gets details of a single `NodeType`.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.VmwareEngine.V1.NodeType> GetNodeTypeAsync(global::Google.Cloud.VmwareEngine.V1.GetNodeTypeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetNodeTypeAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets details of a single `NodeType`.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.VmwareEngine.V1.NodeType> GetNodeTypeAsync(global::Google.Cloud.VmwareEngine.V1.GetNodeTypeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetNodeType, null, options, request);
      }
      /// <summary>
      /// Gets details of credentials for NSX appliance.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.VmwareEngine.V1.Credentials ShowNsxCredentials(global::Google.Cloud.VmwareEngine.V1.ShowNsxCredentialsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ShowNsxCredentials(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets details of credentials for NSX appliance.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.VmwareEngine.V1.Credentials ShowNsxCredentials(global::Google.Cloud.VmwareEngine.V1.ShowNsxCredentialsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ShowNsxCredentials, null, options, request);
      }
      /// <summary>
      /// Gets details of credentials for NSX appliance.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.VmwareEngine.V1.Credentials> ShowNsxCredentialsAsync(global::Google.Cloud.VmwareEngine.V1.ShowNsxCredentialsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ShowNsxCredentialsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets details of credentials for NSX appliance.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.VmwareEngine.V1.Credentials> ShowNsxCredentialsAsync(global::Google.Cloud.VmwareEngine.V1.ShowNsxCredentialsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ShowNsxCredentials, null, options, request);
      }
      /// <summary>
      /// Gets details of credentials for Vcenter appliance.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.VmwareEngine.V1.Credentials ShowVcenterCredentials(global::Google.Cloud.VmwareEngine.V1.ShowVcenterCredentialsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ShowVcenterCredentials(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets details of credentials for Vcenter appliance.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.VmwareEngine.V1.Credentials ShowVcenterCredentials(global::Google.Cloud.VmwareEngine.V1.ShowVcenterCredentialsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ShowVcenterCredentials, null, options, request);
      }
      /// <summary>
      /// Gets details of credentials for Vcenter appliance.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.VmwareEngine.V1.Credentials> ShowVcenterCredentialsAsync(global::Google.Cloud.VmwareEngine.V1.ShowVcenterCredentialsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ShowVcenterCredentialsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets details of credentials for Vcenter appliance.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.VmwareEngine.V1.Credentials> ShowVcenterCredentialsAsync(global::Google.Cloud.VmwareEngine.V1.ShowVcenterCredentialsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ShowVcenterCredentials, null, options, request);
      }
      /// <summary>
      /// Resets credentials of the NSX appliance.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation ResetNsxCredentials(global::Google.Cloud.VmwareEngine.V1.ResetNsxCredentialsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ResetNsxCredentials(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Resets credentials of the NSX appliance.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation ResetNsxCredentials(global::Google.Cloud.VmwareEngine.V1.ResetNsxCredentialsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ResetNsxCredentials, null, options, request);
      }
      /// <summary>
      /// Resets credentials of the NSX appliance.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> ResetNsxCredentialsAsync(global::Google.Cloud.VmwareEngine.V1.ResetNsxCredentialsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ResetNsxCredentialsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Resets credentials of the NSX appliance.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> ResetNsxCredentialsAsync(global::Google.Cloud.VmwareEngine.V1.ResetNsxCredentialsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ResetNsxCredentials, null, options, request);
      }
      /// <summary>
      /// Resets credentials of the Vcenter appliance.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation ResetVcenterCredentials(global::Google.Cloud.VmwareEngine.V1.ResetVcenterCredentialsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ResetVcenterCredentials(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Resets credentials of the Vcenter appliance.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation ResetVcenterCredentials(global::Google.Cloud.VmwareEngine.V1.ResetVcenterCredentialsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ResetVcenterCredentials, null, options, request);
      }
      /// <summary>
      /// Resets credentials of the Vcenter appliance.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> ResetVcenterCredentialsAsync(global::Google.Cloud.VmwareEngine.V1.ResetVcenterCredentialsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ResetVcenterCredentialsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Resets credentials of the Vcenter appliance.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> ResetVcenterCredentialsAsync(global::Google.Cloud.VmwareEngine.V1.ResetVcenterCredentialsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ResetVcenterCredentials, null, options, request);
      }
      /// <summary>
      /// Creates a new HCX activation key in a given private cloud.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation CreateHcxActivationKey(global::Google.Cloud.VmwareEngine.V1.CreateHcxActivationKeyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateHcxActivationKey(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a new HCX activation key in a given private cloud.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation CreateHcxActivationKey(global::Google.Cloud.VmwareEngine.V1.CreateHcxActivationKeyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateHcxActivationKey, null, options, request);
      }
      /// <summary>
      /// Creates a new HCX activation key in a given private cloud.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> CreateHcxActivationKeyAsync(global::Google.Cloud.VmwareEngine.V1.CreateHcxActivationKeyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateHcxActivationKeyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a new HCX activation key in a given private cloud.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> CreateHcxActivationKeyAsync(global::Google.Cloud.VmwareEngine.V1.CreateHcxActivationKeyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateHcxActivationKey, null, options, request);
      }
      /// <summary>
      /// Lists `HcxActivationKey` resources in a given private cloud.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.VmwareEngine.V1.ListHcxActivationKeysResponse ListHcxActivationKeys(global::Google.Cloud.VmwareEngine.V1.ListHcxActivationKeysRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListHcxActivationKeys(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists `HcxActivationKey` resources in a given private cloud.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.VmwareEngine.V1.ListHcxActivationKeysResponse ListHcxActivationKeys(global::Google.Cloud.VmwareEngine.V1.ListHcxActivationKeysRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListHcxActivationKeys, null, options, request);
      }
      /// <summary>
      /// Lists `HcxActivationKey` resources in a given private cloud.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.VmwareEngine.V1.ListHcxActivationKeysResponse> ListHcxActivationKeysAsync(global::Google.Cloud.VmwareEngine.V1.ListHcxActivationKeysRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListHcxActivationKeysAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists `HcxActivationKey` resources in a given private cloud.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.VmwareEngine.V1.ListHcxActivationKeysResponse> ListHcxActivationKeysAsync(global::Google.Cloud.VmwareEngine.V1.ListHcxActivationKeysRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListHcxActivationKeys, null, options, request);
      }
      /// <summary>
      /// Retrieves a `HcxActivationKey` resource by its resource name.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.VmwareEngine.V1.HcxActivationKey GetHcxActivationKey(global::Google.Cloud.VmwareEngine.V1.GetHcxActivationKeyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetHcxActivationKey(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves a `HcxActivationKey` resource by its resource name.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.VmwareEngine.V1.HcxActivationKey GetHcxActivationKey(global::Google.Cloud.VmwareEngine.V1.GetHcxActivationKeyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetHcxActivationKey, null, options, request);
      }
      /// <summary>
      /// Retrieves a `HcxActivationKey` resource by its resource name.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.VmwareEngine.V1.HcxActivationKey> GetHcxActivationKeyAsync(global::Google.Cloud.VmwareEngine.V1.GetHcxActivationKeyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetHcxActivationKeyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves a `HcxActivationKey` resource by its resource name.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.VmwareEngine.V1.HcxActivationKey> GetHcxActivationKeyAsync(global::Google.Cloud.VmwareEngine.V1.GetHcxActivationKeyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetHcxActivationKey, null, options, request);
      }
      /// <summary>
      /// Retrieves a `NetworkPolicy` resource by its resource name.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.VmwareEngine.V1.NetworkPolicy GetNetworkPolicy(global::Google.Cloud.VmwareEngine.V1.GetNetworkPolicyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetNetworkPolicy(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves a `NetworkPolicy` resource by its resource name.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.VmwareEngine.V1.NetworkPolicy GetNetworkPolicy(global::Google.Cloud.VmwareEngine.V1.GetNetworkPolicyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetNetworkPolicy, null, options, request);
      }
      /// <summary>
      /// Retrieves a `NetworkPolicy` resource by its resource name.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.VmwareEngine.V1.NetworkPolicy> GetNetworkPolicyAsync(global::Google.Cloud.VmwareEngine.V1.GetNetworkPolicyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetNetworkPolicyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves a `NetworkPolicy` resource by its resource name.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.VmwareEngine.V1.NetworkPolicy> GetNetworkPolicyAsync(global::Google.Cloud.VmwareEngine.V1.GetNetworkPolicyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetNetworkPolicy, null, options, request);
      }
      /// <summary>
      /// Lists `NetworkPolicy` resources in a specified project and location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.VmwareEngine.V1.ListNetworkPoliciesResponse ListNetworkPolicies(global::Google.Cloud.VmwareEngine.V1.ListNetworkPoliciesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListNetworkPolicies(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists `NetworkPolicy` resources in a specified project and location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.VmwareEngine.V1.ListNetworkPoliciesResponse ListNetworkPolicies(global::Google.Cloud.VmwareEngine.V1.ListNetworkPoliciesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListNetworkPolicies, null, options, request);
      }
      /// <summary>
      /// Lists `NetworkPolicy` resources in a specified project and location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.VmwareEngine.V1.ListNetworkPoliciesResponse> ListNetworkPoliciesAsync(global::Google.Cloud.VmwareEngine.V1.ListNetworkPoliciesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListNetworkPoliciesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists `NetworkPolicy` resources in a specified project and location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.VmwareEngine.V1.ListNetworkPoliciesResponse> ListNetworkPoliciesAsync(global::Google.Cloud.VmwareEngine.V1.ListNetworkPoliciesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListNetworkPolicies, null, options, request);
      }
      /// <summary>
      /// Creates a new network policy in a given VMware Engine network of a
      /// project and location (region). A new network policy cannot be created if
      /// another network policy already exists in the same scope.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation CreateNetworkPolicy(global::Google.Cloud.VmwareEngine.V1.CreateNetworkPolicyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateNetworkPolicy(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a new network policy in a given VMware Engine network of a
      /// project and location (region). A new network policy cannot be created if
      /// another network policy already exists in the same scope.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation CreateNetworkPolicy(global::Google.Cloud.VmwareEngine.V1.CreateNetworkPolicyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateNetworkPolicy, null, options, request);
      }
      /// <summary>
      /// Creates a new network policy in a given VMware Engine network of a
      /// project and location (region). A new network policy cannot be created if
      /// another network policy already exists in the same scope.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> CreateNetworkPolicyAsync(global::Google.Cloud.VmwareEngine.V1.CreateNetworkPolicyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateNetworkPolicyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a new network policy in a given VMware Engine network of a
      /// project and location (region). A new network policy cannot be created if
      /// another network policy already exists in the same scope.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> CreateNetworkPolicyAsync(global::Google.Cloud.VmwareEngine.V1.CreateNetworkPolicyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateNetworkPolicy, null, options, request);
      }
      /// <summary>
      /// Modifies a `NetworkPolicy` resource. Only the following fields can be
      /// updated: `internet_access`, `external_ip`, `edge_services_cidr`.
      /// Only fields specified in `updateMask` are applied. When updating a network
      /// policy, the external IP network service can only be disabled if there are
      /// no external IP addresses present in the scope of the policy. Also, a
      /// `NetworkService` cannot be updated when `NetworkService.state` is set
      /// to `RECONCILING`.
      ///
      /// During operation processing, the resource is temporarily in the `ACTIVE`
      /// state before the operation fully completes. For that period of time, you
      /// can't update the resource. Use the operation status to determine when the
      /// processing fully completes.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation UpdateNetworkPolicy(global::Google.Cloud.VmwareEngine.V1.UpdateNetworkPolicyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateNetworkPolicy(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Modifies a `NetworkPolicy` resource. Only the following fields can be
      /// updated: `internet_access`, `external_ip`, `edge_services_cidr`.
      /// Only fields specified in `updateMask` are applied. When updating a network
      /// policy, the external IP network service can only be disabled if there are
      /// no external IP addresses present in the scope of the policy. Also, a
      /// `NetworkService` cannot be updated when `NetworkService.state` is set
      /// to `RECONCILING`.
      ///
      /// During operation processing, the resource is temporarily in the `ACTIVE`
      /// state before the operation fully completes. For that period of time, you
      /// can't update the resource. Use the operation status to determine when the
      /// processing fully completes.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation UpdateNetworkPolicy(global::Google.Cloud.VmwareEngine.V1.UpdateNetworkPolicyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateNetworkPolicy, null, options, request);
      }
      /// <summary>
      /// Modifies a `NetworkPolicy` resource. Only the following fields can be
      /// updated: `internet_access`, `external_ip`, `edge_services_cidr`.
      /// Only fields specified in `updateMask` are applied. When updating a network
      /// policy, the external IP network service can only be disabled if there are
      /// no external IP addresses present in the scope of the policy. Also, a
      /// `NetworkService` cannot be updated when `NetworkService.state` is set
      /// to `RECONCILING`.
      ///
      /// During operation processing, the resource is temporarily in the `ACTIVE`
      /// state before the operation fully completes. For that period of time, you
      /// can't update the resource. Use the operation status to determine when the
      /// processing fully completes.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> UpdateNetworkPolicyAsync(global::Google.Cloud.VmwareEngine.V1.UpdateNetworkPolicyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateNetworkPolicyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Modifies a `NetworkPolicy` resource. Only the following fields can be
      /// updated: `internet_access`, `external_ip`, `edge_services_cidr`.
      /// Only fields specified in `updateMask` are applied. When updating a network
      /// policy, the external IP network service can only be disabled if there are
      /// no external IP addresses present in the scope of the policy. Also, a
      /// `NetworkService` cannot be updated when `NetworkService.state` is set
      /// to `RECONCILING`.
      ///
      /// During operation processing, the resource is temporarily in the `ACTIVE`
      /// state before the operation fully completes. For that period of time, you
      /// can't update the resource. Use the operation status to determine when the
      /// processing fully completes.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> UpdateNetworkPolicyAsync(global::Google.Cloud.VmwareEngine.V1.UpdateNetworkPolicyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateNetworkPolicy, null, options, request);
      }
      /// <summary>
      /// Deletes a `NetworkPolicy` resource. A network policy cannot be deleted
      /// when `NetworkService.state` is set to `RECONCILING` for either its external
      /// IP or internet access service.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation DeleteNetworkPolicy(global::Google.Cloud.VmwareEngine.V1.DeleteNetworkPolicyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteNetworkPolicy(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes a `NetworkPolicy` resource. A network policy cannot be deleted
      /// when `NetworkService.state` is set to `RECONCILING` for either its external
      /// IP or internet access service.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation DeleteNetworkPolicy(global::Google.Cloud.VmwareEngine.V1.DeleteNetworkPolicyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteNetworkPolicy, null, options, request);
      }
      /// <summary>
      /// Deletes a `NetworkPolicy` resource. A network policy cannot be deleted
      /// when `NetworkService.state` is set to `RECONCILING` for either its external
      /// IP or internet access service.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> DeleteNetworkPolicyAsync(global::Google.Cloud.VmwareEngine.V1.DeleteNetworkPolicyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteNetworkPolicyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes a `NetworkPolicy` resource. A network policy cannot be deleted
      /// when `NetworkService.state` is set to `RECONCILING` for either its external
      /// IP or internet access service.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> DeleteNetworkPolicyAsync(global::Google.Cloud.VmwareEngine.V1.DeleteNetworkPolicyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteNetworkPolicy, null, options, request);
      }
      /// <summary>
      /// Creates a new VMware Engine network that can be used by a private cloud.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation CreateVmwareEngineNetwork(global::Google.Cloud.VmwareEngine.V1.CreateVmwareEngineNetworkRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateVmwareEngineNetwork(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a new VMware Engine network that can be used by a private cloud.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation CreateVmwareEngineNetwork(global::Google.Cloud.VmwareEngine.V1.CreateVmwareEngineNetworkRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateVmwareEngineNetwork, null, options, request);
      }
      /// <summary>
      /// Creates a new VMware Engine network that can be used by a private cloud.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> CreateVmwareEngineNetworkAsync(global::Google.Cloud.VmwareEngine.V1.CreateVmwareEngineNetworkRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateVmwareEngineNetworkAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a new VMware Engine network that can be used by a private cloud.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> CreateVmwareEngineNetworkAsync(global::Google.Cloud.VmwareEngine.V1.CreateVmwareEngineNetworkRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateVmwareEngineNetwork, null, options, request);
      }
      /// <summary>
      /// Modifies a VMware Engine network resource. Only the following fields can be
      /// updated: `description`. Only fields specified in `updateMask` are
      /// applied.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation UpdateVmwareEngineNetwork(global::Google.Cloud.VmwareEngine.V1.UpdateVmwareEngineNetworkRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateVmwareEngineNetwork(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Modifies a VMware Engine network resource. Only the following fields can be
      /// updated: `description`. Only fields specified in `updateMask` are
      /// applied.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation UpdateVmwareEngineNetwork(global::Google.Cloud.VmwareEngine.V1.UpdateVmwareEngineNetworkRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateVmwareEngineNetwork, null, options, request);
      }
      /// <summary>
      /// Modifies a VMware Engine network resource. Only the following fields can be
      /// updated: `description`. Only fields specified in `updateMask` are
      /// applied.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> UpdateVmwareEngineNetworkAsync(global::Google.Cloud.VmwareEngine.V1.UpdateVmwareEngineNetworkRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateVmwareEngineNetworkAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Modifies a VMware Engine network resource. Only the following fields can be
      /// updated: `description`. Only fields specified in `updateMask` are
      /// applied.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> UpdateVmwareEngineNetworkAsync(global::Google.Cloud.VmwareEngine.V1.UpdateVmwareEngineNetworkRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateVmwareEngineNetwork, null, options, request);
      }
      /// <summary>
      /// Deletes a `VmwareEngineNetwork` resource. You can only delete a VMware
      /// Engine network after all resources that refer to it are deleted. For
      /// example, a private cloud, a network peering, and a network policy can all
      /// refer to the same VMware Engine network.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation DeleteVmwareEngineNetwork(global::Google.Cloud.VmwareEngine.V1.DeleteVmwareEngineNetworkRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteVmwareEngineNetwork(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes a `VmwareEngineNetwork` resource. You can only delete a VMware
      /// Engine network after all resources that refer to it are deleted. For
      /// example, a private cloud, a network peering, and a network policy can all
      /// refer to the same VMware Engine network.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation DeleteVmwareEngineNetwork(global::Google.Cloud.VmwareEngine.V1.DeleteVmwareEngineNetworkRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteVmwareEngineNetwork, null, options, request);
      }
      /// <summary>
      /// Deletes a `VmwareEngineNetwork` resource. You can only delete a VMware
      /// Engine network after all resources that refer to it are deleted. For
      /// example, a private cloud, a network peering, and a network policy can all
      /// refer to the same VMware Engine network.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> DeleteVmwareEngineNetworkAsync(global::Google.Cloud.VmwareEngine.V1.DeleteVmwareEngineNetworkRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteVmwareEngineNetworkAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes a `VmwareEngineNetwork` resource. You can only delete a VMware
      /// Engine network after all resources that refer to it are deleted. For
      /// example, a private cloud, a network peering, and a network policy can all
      /// refer to the same VMware Engine network.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> DeleteVmwareEngineNetworkAsync(global::Google.Cloud.VmwareEngine.V1.DeleteVmwareEngineNetworkRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteVmwareEngineNetwork, null, options, request);
      }
      /// <summary>
      /// Retrieves a `VmwareEngineNetwork` resource by its resource name. The
      /// resource contains details of the VMware Engine network, such as its VMware
      /// Engine network type, peered networks in a service project, and state
      /// (for example, `CREATING`, `ACTIVE`, `DELETING`).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.VmwareEngine.V1.VmwareEngineNetwork GetVmwareEngineNetwork(global::Google.Cloud.VmwareEngine.V1.GetVmwareEngineNetworkRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetVmwareEngineNetwork(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves a `VmwareEngineNetwork` resource by its resource name. The
      /// resource contains details of the VMware Engine network, such as its VMware
      /// Engine network type, peered networks in a service project, and state
      /// (for example, `CREATING`, `ACTIVE`, `DELETING`).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.VmwareEngine.V1.VmwareEngineNetwork GetVmwareEngineNetwork(global::Google.Cloud.VmwareEngine.V1.GetVmwareEngineNetworkRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetVmwareEngineNetwork, null, options, request);
      }
      /// <summary>
      /// Retrieves a `VmwareEngineNetwork` resource by its resource name. The
      /// resource contains details of the VMware Engine network, such as its VMware
      /// Engine network type, peered networks in a service project, and state
      /// (for example, `CREATING`, `ACTIVE`, `DELETING`).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.VmwareEngine.V1.VmwareEngineNetwork> GetVmwareEngineNetworkAsync(global::Google.Cloud.VmwareEngine.V1.GetVmwareEngineNetworkRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetVmwareEngineNetworkAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves a `VmwareEngineNetwork` resource by its resource name. The
      /// resource contains details of the VMware Engine network, such as its VMware
      /// Engine network type, peered networks in a service project, and state
      /// (for example, `CREATING`, `ACTIVE`, `DELETING`).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.VmwareEngine.V1.VmwareEngineNetwork> GetVmwareEngineNetworkAsync(global::Google.Cloud.VmwareEngine.V1.GetVmwareEngineNetworkRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetVmwareEngineNetwork, null, options, request);
      }
      /// <summary>
      /// Lists `VmwareEngineNetwork` resources in a given project and location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.VmwareEngine.V1.ListVmwareEngineNetworksResponse ListVmwareEngineNetworks(global::Google.Cloud.VmwareEngine.V1.ListVmwareEngineNetworksRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListVmwareEngineNetworks(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists `VmwareEngineNetwork` resources in a given project and location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.VmwareEngine.V1.ListVmwareEngineNetworksResponse ListVmwareEngineNetworks(global::Google.Cloud.VmwareEngine.V1.ListVmwareEngineNetworksRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListVmwareEngineNetworks, null, options, request);
      }
      /// <summary>
      /// Lists `VmwareEngineNetwork` resources in a given project and location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.VmwareEngine.V1.ListVmwareEngineNetworksResponse> ListVmwareEngineNetworksAsync(global::Google.Cloud.VmwareEngine.V1.ListVmwareEngineNetworksRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListVmwareEngineNetworksAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists `VmwareEngineNetwork` resources in a given project and location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.VmwareEngine.V1.ListVmwareEngineNetworksResponse> ListVmwareEngineNetworksAsync(global::Google.Cloud.VmwareEngine.V1.ListVmwareEngineNetworksRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListVmwareEngineNetworks, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override VmwareEngineClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new VmwareEngineClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(VmwareEngineBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_ListPrivateClouds, serviceImpl.ListPrivateClouds)
          .AddMethod(__Method_GetPrivateCloud, serviceImpl.GetPrivateCloud)
          .AddMethod(__Method_CreatePrivateCloud, serviceImpl.CreatePrivateCloud)
          .AddMethod(__Method_UpdatePrivateCloud, serviceImpl.UpdatePrivateCloud)
          .AddMethod(__Method_DeletePrivateCloud, serviceImpl.DeletePrivateCloud)
          .AddMethod(__Method_UndeletePrivateCloud, serviceImpl.UndeletePrivateCloud)
          .AddMethod(__Method_ListClusters, serviceImpl.ListClusters)
          .AddMethod(__Method_GetCluster, serviceImpl.GetCluster)
          .AddMethod(__Method_CreateCluster, serviceImpl.CreateCluster)
          .AddMethod(__Method_UpdateCluster, serviceImpl.UpdateCluster)
          .AddMethod(__Method_DeleteCluster, serviceImpl.DeleteCluster)
          .AddMethod(__Method_ListSubnets, serviceImpl.ListSubnets)
          .AddMethod(__Method_ListNodeTypes, serviceImpl.ListNodeTypes)
          .AddMethod(__Method_GetNodeType, serviceImpl.GetNodeType)
          .AddMethod(__Method_ShowNsxCredentials, serviceImpl.ShowNsxCredentials)
          .AddMethod(__Method_ShowVcenterCredentials, serviceImpl.ShowVcenterCredentials)
          .AddMethod(__Method_ResetNsxCredentials, serviceImpl.ResetNsxCredentials)
          .AddMethod(__Method_ResetVcenterCredentials, serviceImpl.ResetVcenterCredentials)
          .AddMethod(__Method_CreateHcxActivationKey, serviceImpl.CreateHcxActivationKey)
          .AddMethod(__Method_ListHcxActivationKeys, serviceImpl.ListHcxActivationKeys)
          .AddMethod(__Method_GetHcxActivationKey, serviceImpl.GetHcxActivationKey)
          .AddMethod(__Method_GetNetworkPolicy, serviceImpl.GetNetworkPolicy)
          .AddMethod(__Method_ListNetworkPolicies, serviceImpl.ListNetworkPolicies)
          .AddMethod(__Method_CreateNetworkPolicy, serviceImpl.CreateNetworkPolicy)
          .AddMethod(__Method_UpdateNetworkPolicy, serviceImpl.UpdateNetworkPolicy)
          .AddMethod(__Method_DeleteNetworkPolicy, serviceImpl.DeleteNetworkPolicy)
          .AddMethod(__Method_CreateVmwareEngineNetwork, serviceImpl.CreateVmwareEngineNetwork)
          .AddMethod(__Method_UpdateVmwareEngineNetwork, serviceImpl.UpdateVmwareEngineNetwork)
          .AddMethod(__Method_DeleteVmwareEngineNetwork, serviceImpl.DeleteVmwareEngineNetwork)
          .AddMethod(__Method_GetVmwareEngineNetwork, serviceImpl.GetVmwareEngineNetwork)
          .AddMethod(__Method_ListVmwareEngineNetworks, serviceImpl.ListVmwareEngineNetworks).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, VmwareEngineBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_ListPrivateClouds, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.VmwareEngine.V1.ListPrivateCloudsRequest, global::Google.Cloud.VmwareEngine.V1.ListPrivateCloudsResponse>(serviceImpl.ListPrivateClouds));
      serviceBinder.AddMethod(__Method_GetPrivateCloud, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.VmwareEngine.V1.GetPrivateCloudRequest, global::Google.Cloud.VmwareEngine.V1.PrivateCloud>(serviceImpl.GetPrivateCloud));
      serviceBinder.AddMethod(__Method_CreatePrivateCloud, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.VmwareEngine.V1.CreatePrivateCloudRequest, global::Google.LongRunning.Operation>(serviceImpl.CreatePrivateCloud));
      serviceBinder.AddMethod(__Method_UpdatePrivateCloud, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.VmwareEngine.V1.UpdatePrivateCloudRequest, global::Google.LongRunning.Operation>(serviceImpl.UpdatePrivateCloud));
      serviceBinder.AddMethod(__Method_DeletePrivateCloud, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.VmwareEngine.V1.DeletePrivateCloudRequest, global::Google.LongRunning.Operation>(serviceImpl.DeletePrivateCloud));
      serviceBinder.AddMethod(__Method_UndeletePrivateCloud, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.VmwareEngine.V1.UndeletePrivateCloudRequest, global::Google.LongRunning.Operation>(serviceImpl.UndeletePrivateCloud));
      serviceBinder.AddMethod(__Method_ListClusters, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.VmwareEngine.V1.ListClustersRequest, global::Google.Cloud.VmwareEngine.V1.ListClustersResponse>(serviceImpl.ListClusters));
      serviceBinder.AddMethod(__Method_GetCluster, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.VmwareEngine.V1.GetClusterRequest, global::Google.Cloud.VmwareEngine.V1.Cluster>(serviceImpl.GetCluster));
      serviceBinder.AddMethod(__Method_CreateCluster, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.VmwareEngine.V1.CreateClusterRequest, global::Google.LongRunning.Operation>(serviceImpl.CreateCluster));
      serviceBinder.AddMethod(__Method_UpdateCluster, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.VmwareEngine.V1.UpdateClusterRequest, global::Google.LongRunning.Operation>(serviceImpl.UpdateCluster));
      serviceBinder.AddMethod(__Method_DeleteCluster, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.VmwareEngine.V1.DeleteClusterRequest, global::Google.LongRunning.Operation>(serviceImpl.DeleteCluster));
      serviceBinder.AddMethod(__Method_ListSubnets, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.VmwareEngine.V1.ListSubnetsRequest, global::Google.Cloud.VmwareEngine.V1.ListSubnetsResponse>(serviceImpl.ListSubnets));
      serviceBinder.AddMethod(__Method_ListNodeTypes, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.VmwareEngine.V1.ListNodeTypesRequest, global::Google.Cloud.VmwareEngine.V1.ListNodeTypesResponse>(serviceImpl.ListNodeTypes));
      serviceBinder.AddMethod(__Method_GetNodeType, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.VmwareEngine.V1.GetNodeTypeRequest, global::Google.Cloud.VmwareEngine.V1.NodeType>(serviceImpl.GetNodeType));
      serviceBinder.AddMethod(__Method_ShowNsxCredentials, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.VmwareEngine.V1.ShowNsxCredentialsRequest, global::Google.Cloud.VmwareEngine.V1.Credentials>(serviceImpl.ShowNsxCredentials));
      serviceBinder.AddMethod(__Method_ShowVcenterCredentials, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.VmwareEngine.V1.ShowVcenterCredentialsRequest, global::Google.Cloud.VmwareEngine.V1.Credentials>(serviceImpl.ShowVcenterCredentials));
      serviceBinder.AddMethod(__Method_ResetNsxCredentials, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.VmwareEngine.V1.ResetNsxCredentialsRequest, global::Google.LongRunning.Operation>(serviceImpl.ResetNsxCredentials));
      serviceBinder.AddMethod(__Method_ResetVcenterCredentials, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.VmwareEngine.V1.ResetVcenterCredentialsRequest, global::Google.LongRunning.Operation>(serviceImpl.ResetVcenterCredentials));
      serviceBinder.AddMethod(__Method_CreateHcxActivationKey, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.VmwareEngine.V1.CreateHcxActivationKeyRequest, global::Google.LongRunning.Operation>(serviceImpl.CreateHcxActivationKey));
      serviceBinder.AddMethod(__Method_ListHcxActivationKeys, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.VmwareEngine.V1.ListHcxActivationKeysRequest, global::Google.Cloud.VmwareEngine.V1.ListHcxActivationKeysResponse>(serviceImpl.ListHcxActivationKeys));
      serviceBinder.AddMethod(__Method_GetHcxActivationKey, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.VmwareEngine.V1.GetHcxActivationKeyRequest, global::Google.Cloud.VmwareEngine.V1.HcxActivationKey>(serviceImpl.GetHcxActivationKey));
      serviceBinder.AddMethod(__Method_GetNetworkPolicy, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.VmwareEngine.V1.GetNetworkPolicyRequest, global::Google.Cloud.VmwareEngine.V1.NetworkPolicy>(serviceImpl.GetNetworkPolicy));
      serviceBinder.AddMethod(__Method_ListNetworkPolicies, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.VmwareEngine.V1.ListNetworkPoliciesRequest, global::Google.Cloud.VmwareEngine.V1.ListNetworkPoliciesResponse>(serviceImpl.ListNetworkPolicies));
      serviceBinder.AddMethod(__Method_CreateNetworkPolicy, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.VmwareEngine.V1.CreateNetworkPolicyRequest, global::Google.LongRunning.Operation>(serviceImpl.CreateNetworkPolicy));
      serviceBinder.AddMethod(__Method_UpdateNetworkPolicy, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.VmwareEngine.V1.UpdateNetworkPolicyRequest, global::Google.LongRunning.Operation>(serviceImpl.UpdateNetworkPolicy));
      serviceBinder.AddMethod(__Method_DeleteNetworkPolicy, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.VmwareEngine.V1.DeleteNetworkPolicyRequest, global::Google.LongRunning.Operation>(serviceImpl.DeleteNetworkPolicy));
      serviceBinder.AddMethod(__Method_CreateVmwareEngineNetwork, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.VmwareEngine.V1.CreateVmwareEngineNetworkRequest, global::Google.LongRunning.Operation>(serviceImpl.CreateVmwareEngineNetwork));
      serviceBinder.AddMethod(__Method_UpdateVmwareEngineNetwork, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.VmwareEngine.V1.UpdateVmwareEngineNetworkRequest, global::Google.LongRunning.Operation>(serviceImpl.UpdateVmwareEngineNetwork));
      serviceBinder.AddMethod(__Method_DeleteVmwareEngineNetwork, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.VmwareEngine.V1.DeleteVmwareEngineNetworkRequest, global::Google.LongRunning.Operation>(serviceImpl.DeleteVmwareEngineNetwork));
      serviceBinder.AddMethod(__Method_GetVmwareEngineNetwork, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.VmwareEngine.V1.GetVmwareEngineNetworkRequest, global::Google.Cloud.VmwareEngine.V1.VmwareEngineNetwork>(serviceImpl.GetVmwareEngineNetwork));
      serviceBinder.AddMethod(__Method_ListVmwareEngineNetworks, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.VmwareEngine.V1.ListVmwareEngineNetworksRequest, global::Google.Cloud.VmwareEngine.V1.ListVmwareEngineNetworksResponse>(serviceImpl.ListVmwareEngineNetworks));
    }

  }
}
#endregion
