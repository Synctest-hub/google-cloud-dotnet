#!/bin/bash

set -ex

TMP=$(mktemp -d)

copy_one_api() {
  PACKAGE=$1
  STAGING_DIR=owl-bot-staging/$1
  PACKAGE_DIR=apis/$1

  # All source files need the extension .g.cs.  Some will only be generated with the
  # extension .cs.  Rename files that end only in .cs.
  for cs_file in $(find "$STAGING_DIR" -name '*.cs'); do
    if [[ $cs_file != *.g.cs ]]; then
      mv $cs_file $(echo $cs_file | sed -E 's/.cs$/.g.cs/g')
    fi
  done

  # Remove the newly generated standalone snippets until they are ready for surfacing.
  rm -rf "$STAGING_DIR/$1.StandaloneSnippets"

  # We generate our own project files
  rm -f $(find "$STAGING_DIR" -name '*.csproj')

  # Files generated by microgenerator are mysteriously marked as executable.
  # They shouldn't be.
  chmod a-x $(find "$STAGING_DIR" -name '*.cs')

  # Wipe out all the existing source files we're about to replace.
  # This will clear out source files that are no longer generated.
  rm -f $(find "$PACKAGE_DIR" -name '*.g.cs')

  # Copy the files out of the staging directory into the package directory.
  mkdir -p "$PACKAGE_DIR"
  cp -rf $STAGING_DIR/* "$PACKAGE_DIR"

  # Clean out the staging directory.
  rm -rf "$STAGING_DIR"

  # The following code was copied from generate_api().
  if [[ -f $PACKAGE_DIR/postgeneration.patch ]]; then
    echo "Applying post-generation patch for $PACKAGE"
    (
      cd $PACKAGE_DIR
      git apply postgeneration.patch
    )
  fi

  if [[ $(grep -E "^namespace" apis/$1/$1/*.cs | grep -Ev "namespace ${1}[[:space:]{]*\$") ]]; then
    # We know Google.LongRunning contains a proto in Google.Cloud.
    if [[ $1 == "Google.LongRunning" ]]; then
      echo "Ignoring broken namespaces in $1"
    else
      echo "API $1 has broken namespace declarations"
      exit 1
    fi
  fi
}

# Iterate over all the apis in the owl-bot-staging directory.
if [[ -d owl-bot-staging ]]
then
  for package in $(ls -1 owl-bot-staging)
  do
    copy_one_api "$package"
  done
  rm -rf owl-bot-staging
fi