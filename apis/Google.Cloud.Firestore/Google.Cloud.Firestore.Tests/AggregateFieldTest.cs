// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License").
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at 
//
// https://www.apache.org/licenses/LICENSE-2.0 
//
// Unless required by applicable law or agreed to in writing, software 
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and 
// limitations under the License.

using System;
using Xunit;
using AF = Google.Cloud.Firestore.AggregateField;
using static Google.Cloud.Firestore.V1.StructuredAggregationQuery.Types;
using static Google.Cloud.Firestore.V1.StructuredAggregationQuery.Types.Aggregation.Types;
using static Google.Cloud.Firestore.V1.StructuredQuery.Types;

namespace Google.Cloud.Firestore.Tests;

public class AggregateFieldTest
{
    [Fact]
    public void NullFieldCheck()
    {        
        Assert.Throws<ArgumentNullException>(() => AF.Sum(null));
        Assert.Throws<ArgumentNullException>(() => AF.Average(null));
    }

    [Fact]
    public void Count()
    {
        // Alias generated by client library
        var aggregate = AF.Count();
        Assert.Equal(AF.CountAlias, aggregate.Alias);
        Assert.Equal(new Aggregation { Count = new Count(), Alias = "A1" }, aggregate.GetAggregationForIndex(0));
    }


    [Fact]
    public void Sum_AutoAlias()
    {
        var aggregate = AF.Sum("x");
        Assert.Equal("Sum_x", aggregate.Alias);
        Assert.Equal(new Aggregation { Sum = new Sum { Field = new FieldReference { FieldPath = "x" } }, Alias = "A1" }, aggregate.GetAggregationForIndex(0));
    }

    [Fact]
    public void Sum_SpecifiedAlias()
    {
        // Alias generated by client library
        var aggregate = AF.Sum("x", "xyz");
        Assert.Equal("xyz", aggregate.Alias);
        Assert.Equal(new Aggregation { Sum = new Sum { Field = new FieldReference { FieldPath = "x" } }, Alias = "A1" }, aggregate.GetAggregationForIndex(0));
    }

    [Fact]
    public void Average_AutoAlias()
    {
        var aggregate = AF.Average("x");
        Assert.Equal("Avg_x", aggregate.Alias);
        Assert.Equal(new Aggregation { Avg = new Avg { Field = new FieldReference { FieldPath = "x" } }, Alias = "A1" }, aggregate.GetAggregationForIndex(0));
    }

    [Fact]
    public void Avg_SpecifiedAlias()
    {
        // Alias generated by client library
        var aggregate = AF.Average("x", "xyz");
        Assert.Equal("xyz", aggregate.Alias);
        Assert.Equal(new Aggregation { Avg = new Avg { Field = new FieldReference { FieldPath = "x" } }, Alias = "A1" }, aggregate.GetAggregationForIndex(0));
    }
}
