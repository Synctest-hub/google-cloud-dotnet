// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: google/cloud/orchestration/airflow/service/v1/environments.proto
// </auto-generated>
// Original file comments:
// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#pragma warning disable 0414, 1591, 8981
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Google.Cloud.Orchestration.Airflow.Service.V1 {
  /// <summary>
  /// Managed Apache Airflow Environments.
  /// </summary>
  public static partial class Environments
  {
    static readonly string __ServiceName = "google.cloud.orchestration.airflow.service.v1.Environments";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Orchestration.Airflow.Service.V1.CreateEnvironmentRequest> __Marshaller_google_cloud_orchestration_airflow_service_v1_CreateEnvironmentRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Orchestration.Airflow.Service.V1.CreateEnvironmentRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.LongRunning.Operation> __Marshaller_google_longrunning_Operation = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.LongRunning.Operation.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Orchestration.Airflow.Service.V1.GetEnvironmentRequest> __Marshaller_google_cloud_orchestration_airflow_service_v1_GetEnvironmentRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Orchestration.Airflow.Service.V1.GetEnvironmentRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Orchestration.Airflow.Service.V1.Environment> __Marshaller_google_cloud_orchestration_airflow_service_v1_Environment = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Orchestration.Airflow.Service.V1.Environment.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Orchestration.Airflow.Service.V1.ListEnvironmentsRequest> __Marshaller_google_cloud_orchestration_airflow_service_v1_ListEnvironmentsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Orchestration.Airflow.Service.V1.ListEnvironmentsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Orchestration.Airflow.Service.V1.ListEnvironmentsResponse> __Marshaller_google_cloud_orchestration_airflow_service_v1_ListEnvironmentsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Orchestration.Airflow.Service.V1.ListEnvironmentsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Orchestration.Airflow.Service.V1.UpdateEnvironmentRequest> __Marshaller_google_cloud_orchestration_airflow_service_v1_UpdateEnvironmentRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Orchestration.Airflow.Service.V1.UpdateEnvironmentRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Orchestration.Airflow.Service.V1.DeleteEnvironmentRequest> __Marshaller_google_cloud_orchestration_airflow_service_v1_DeleteEnvironmentRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Orchestration.Airflow.Service.V1.DeleteEnvironmentRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Orchestration.Airflow.Service.V1.ExecuteAirflowCommandRequest> __Marshaller_google_cloud_orchestration_airflow_service_v1_ExecuteAirflowCommandRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Orchestration.Airflow.Service.V1.ExecuteAirflowCommandRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Orchestration.Airflow.Service.V1.ExecuteAirflowCommandResponse> __Marshaller_google_cloud_orchestration_airflow_service_v1_ExecuteAirflowCommandResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Orchestration.Airflow.Service.V1.ExecuteAirflowCommandResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Orchestration.Airflow.Service.V1.StopAirflowCommandRequest> __Marshaller_google_cloud_orchestration_airflow_service_v1_StopAirflowCommandRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Orchestration.Airflow.Service.V1.StopAirflowCommandRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Orchestration.Airflow.Service.V1.StopAirflowCommandResponse> __Marshaller_google_cloud_orchestration_airflow_service_v1_StopAirflowCommandResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Orchestration.Airflow.Service.V1.StopAirflowCommandResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Orchestration.Airflow.Service.V1.PollAirflowCommandRequest> __Marshaller_google_cloud_orchestration_airflow_service_v1_PollAirflowCommandRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Orchestration.Airflow.Service.V1.PollAirflowCommandRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Orchestration.Airflow.Service.V1.PollAirflowCommandResponse> __Marshaller_google_cloud_orchestration_airflow_service_v1_PollAirflowCommandResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Orchestration.Airflow.Service.V1.PollAirflowCommandResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Orchestration.Airflow.Service.V1.SaveSnapshotRequest> __Marshaller_google_cloud_orchestration_airflow_service_v1_SaveSnapshotRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Orchestration.Airflow.Service.V1.SaveSnapshotRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Orchestration.Airflow.Service.V1.LoadSnapshotRequest> __Marshaller_google_cloud_orchestration_airflow_service_v1_LoadSnapshotRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Orchestration.Airflow.Service.V1.LoadSnapshotRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Orchestration.Airflow.Service.V1.DatabaseFailoverRequest> __Marshaller_google_cloud_orchestration_airflow_service_v1_DatabaseFailoverRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Orchestration.Airflow.Service.V1.DatabaseFailoverRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Orchestration.Airflow.Service.V1.FetchDatabasePropertiesRequest> __Marshaller_google_cloud_orchestration_airflow_service_v1_FetchDatabasePropertiesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Orchestration.Airflow.Service.V1.FetchDatabasePropertiesRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Orchestration.Airflow.Service.V1.FetchDatabasePropertiesResponse> __Marshaller_google_cloud_orchestration_airflow_service_v1_FetchDatabasePropertiesResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Orchestration.Airflow.Service.V1.FetchDatabasePropertiesResponse.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Orchestration.Airflow.Service.V1.CreateEnvironmentRequest, global::Google.LongRunning.Operation> __Method_CreateEnvironment = new grpc::Method<global::Google.Cloud.Orchestration.Airflow.Service.V1.CreateEnvironmentRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateEnvironment",
        __Marshaller_google_cloud_orchestration_airflow_service_v1_CreateEnvironmentRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Orchestration.Airflow.Service.V1.GetEnvironmentRequest, global::Google.Cloud.Orchestration.Airflow.Service.V1.Environment> __Method_GetEnvironment = new grpc::Method<global::Google.Cloud.Orchestration.Airflow.Service.V1.GetEnvironmentRequest, global::Google.Cloud.Orchestration.Airflow.Service.V1.Environment>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetEnvironment",
        __Marshaller_google_cloud_orchestration_airflow_service_v1_GetEnvironmentRequest,
        __Marshaller_google_cloud_orchestration_airflow_service_v1_Environment);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Orchestration.Airflow.Service.V1.ListEnvironmentsRequest, global::Google.Cloud.Orchestration.Airflow.Service.V1.ListEnvironmentsResponse> __Method_ListEnvironments = new grpc::Method<global::Google.Cloud.Orchestration.Airflow.Service.V1.ListEnvironmentsRequest, global::Google.Cloud.Orchestration.Airflow.Service.V1.ListEnvironmentsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListEnvironments",
        __Marshaller_google_cloud_orchestration_airflow_service_v1_ListEnvironmentsRequest,
        __Marshaller_google_cloud_orchestration_airflow_service_v1_ListEnvironmentsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Orchestration.Airflow.Service.V1.UpdateEnvironmentRequest, global::Google.LongRunning.Operation> __Method_UpdateEnvironment = new grpc::Method<global::Google.Cloud.Orchestration.Airflow.Service.V1.UpdateEnvironmentRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateEnvironment",
        __Marshaller_google_cloud_orchestration_airflow_service_v1_UpdateEnvironmentRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Orchestration.Airflow.Service.V1.DeleteEnvironmentRequest, global::Google.LongRunning.Operation> __Method_DeleteEnvironment = new grpc::Method<global::Google.Cloud.Orchestration.Airflow.Service.V1.DeleteEnvironmentRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteEnvironment",
        __Marshaller_google_cloud_orchestration_airflow_service_v1_DeleteEnvironmentRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Orchestration.Airflow.Service.V1.ExecuteAirflowCommandRequest, global::Google.Cloud.Orchestration.Airflow.Service.V1.ExecuteAirflowCommandResponse> __Method_ExecuteAirflowCommand = new grpc::Method<global::Google.Cloud.Orchestration.Airflow.Service.V1.ExecuteAirflowCommandRequest, global::Google.Cloud.Orchestration.Airflow.Service.V1.ExecuteAirflowCommandResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ExecuteAirflowCommand",
        __Marshaller_google_cloud_orchestration_airflow_service_v1_ExecuteAirflowCommandRequest,
        __Marshaller_google_cloud_orchestration_airflow_service_v1_ExecuteAirflowCommandResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Orchestration.Airflow.Service.V1.StopAirflowCommandRequest, global::Google.Cloud.Orchestration.Airflow.Service.V1.StopAirflowCommandResponse> __Method_StopAirflowCommand = new grpc::Method<global::Google.Cloud.Orchestration.Airflow.Service.V1.StopAirflowCommandRequest, global::Google.Cloud.Orchestration.Airflow.Service.V1.StopAirflowCommandResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "StopAirflowCommand",
        __Marshaller_google_cloud_orchestration_airflow_service_v1_StopAirflowCommandRequest,
        __Marshaller_google_cloud_orchestration_airflow_service_v1_StopAirflowCommandResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Orchestration.Airflow.Service.V1.PollAirflowCommandRequest, global::Google.Cloud.Orchestration.Airflow.Service.V1.PollAirflowCommandResponse> __Method_PollAirflowCommand = new grpc::Method<global::Google.Cloud.Orchestration.Airflow.Service.V1.PollAirflowCommandRequest, global::Google.Cloud.Orchestration.Airflow.Service.V1.PollAirflowCommandResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PollAirflowCommand",
        __Marshaller_google_cloud_orchestration_airflow_service_v1_PollAirflowCommandRequest,
        __Marshaller_google_cloud_orchestration_airflow_service_v1_PollAirflowCommandResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Orchestration.Airflow.Service.V1.SaveSnapshotRequest, global::Google.LongRunning.Operation> __Method_SaveSnapshot = new grpc::Method<global::Google.Cloud.Orchestration.Airflow.Service.V1.SaveSnapshotRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SaveSnapshot",
        __Marshaller_google_cloud_orchestration_airflow_service_v1_SaveSnapshotRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Orchestration.Airflow.Service.V1.LoadSnapshotRequest, global::Google.LongRunning.Operation> __Method_LoadSnapshot = new grpc::Method<global::Google.Cloud.Orchestration.Airflow.Service.V1.LoadSnapshotRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "LoadSnapshot",
        __Marshaller_google_cloud_orchestration_airflow_service_v1_LoadSnapshotRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Orchestration.Airflow.Service.V1.DatabaseFailoverRequest, global::Google.LongRunning.Operation> __Method_DatabaseFailover = new grpc::Method<global::Google.Cloud.Orchestration.Airflow.Service.V1.DatabaseFailoverRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DatabaseFailover",
        __Marshaller_google_cloud_orchestration_airflow_service_v1_DatabaseFailoverRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Orchestration.Airflow.Service.V1.FetchDatabasePropertiesRequest, global::Google.Cloud.Orchestration.Airflow.Service.V1.FetchDatabasePropertiesResponse> __Method_FetchDatabaseProperties = new grpc::Method<global::Google.Cloud.Orchestration.Airflow.Service.V1.FetchDatabasePropertiesRequest, global::Google.Cloud.Orchestration.Airflow.Service.V1.FetchDatabasePropertiesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "FetchDatabaseProperties",
        __Marshaller_google_cloud_orchestration_airflow_service_v1_FetchDatabasePropertiesRequest,
        __Marshaller_google_cloud_orchestration_airflow_service_v1_FetchDatabasePropertiesResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Google.Cloud.Orchestration.Airflow.Service.V1.EnvironmentsReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of Environments</summary>
    [grpc::BindServiceMethod(typeof(Environments), "BindService")]
    public abstract partial class EnvironmentsBase
    {
      /// <summary>
      /// Create a new environment.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> CreateEnvironment(global::Google.Cloud.Orchestration.Airflow.Service.V1.CreateEnvironmentRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get an existing environment.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Orchestration.Airflow.Service.V1.Environment> GetEnvironment(global::Google.Cloud.Orchestration.Airflow.Service.V1.GetEnvironmentRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// List environments.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Orchestration.Airflow.Service.V1.ListEnvironmentsResponse> ListEnvironments(global::Google.Cloud.Orchestration.Airflow.Service.V1.ListEnvironmentsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Update an environment.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> UpdateEnvironment(global::Google.Cloud.Orchestration.Airflow.Service.V1.UpdateEnvironmentRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Delete an environment.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> DeleteEnvironment(global::Google.Cloud.Orchestration.Airflow.Service.V1.DeleteEnvironmentRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Executes Airflow CLI command.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Orchestration.Airflow.Service.V1.ExecuteAirflowCommandResponse> ExecuteAirflowCommand(global::Google.Cloud.Orchestration.Airflow.Service.V1.ExecuteAirflowCommandRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Stops Airflow CLI command execution.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Orchestration.Airflow.Service.V1.StopAirflowCommandResponse> StopAirflowCommand(global::Google.Cloud.Orchestration.Airflow.Service.V1.StopAirflowCommandRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Polls Airflow CLI command execution and fetches logs.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Orchestration.Airflow.Service.V1.PollAirflowCommandResponse> PollAirflowCommand(global::Google.Cloud.Orchestration.Airflow.Service.V1.PollAirflowCommandRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Creates a snapshots of a Cloud Composer environment.
      ///
      /// As a result of this operation, snapshot of environment's state is stored
      /// in a location specified in the SaveSnapshotRequest.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> SaveSnapshot(global::Google.Cloud.Orchestration.Airflow.Service.V1.SaveSnapshotRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Loads a snapshot of a Cloud Composer environment.
      ///
      /// As a result of this operation, a snapshot of environment's specified in
      /// LoadSnapshotRequest is loaded into the environment.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> LoadSnapshot(global::Google.Cloud.Orchestration.Airflow.Service.V1.LoadSnapshotRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Triggers database failover (only for highly resilient environments).
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> DatabaseFailover(global::Google.Cloud.Orchestration.Airflow.Service.V1.DatabaseFailoverRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Fetches database properties.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Orchestration.Airflow.Service.V1.FetchDatabasePropertiesResponse> FetchDatabaseProperties(global::Google.Cloud.Orchestration.Airflow.Service.V1.FetchDatabasePropertiesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Environments</summary>
    public partial class EnvironmentsClient : grpc::ClientBase<EnvironmentsClient>
    {
      /// <summary>Creates a new client for Environments</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public EnvironmentsClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Environments that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public EnvironmentsClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected EnvironmentsClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected EnvironmentsClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Create a new environment.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation CreateEnvironment(global::Google.Cloud.Orchestration.Airflow.Service.V1.CreateEnvironmentRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateEnvironment(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Create a new environment.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation CreateEnvironment(global::Google.Cloud.Orchestration.Airflow.Service.V1.CreateEnvironmentRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateEnvironment, null, options, request);
      }
      /// <summary>
      /// Create a new environment.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> CreateEnvironmentAsync(global::Google.Cloud.Orchestration.Airflow.Service.V1.CreateEnvironmentRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateEnvironmentAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Create a new environment.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> CreateEnvironmentAsync(global::Google.Cloud.Orchestration.Airflow.Service.V1.CreateEnvironmentRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateEnvironment, null, options, request);
      }
      /// <summary>
      /// Get an existing environment.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Orchestration.Airflow.Service.V1.Environment GetEnvironment(global::Google.Cloud.Orchestration.Airflow.Service.V1.GetEnvironmentRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetEnvironment(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get an existing environment.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Orchestration.Airflow.Service.V1.Environment GetEnvironment(global::Google.Cloud.Orchestration.Airflow.Service.V1.GetEnvironmentRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetEnvironment, null, options, request);
      }
      /// <summary>
      /// Get an existing environment.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Orchestration.Airflow.Service.V1.Environment> GetEnvironmentAsync(global::Google.Cloud.Orchestration.Airflow.Service.V1.GetEnvironmentRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetEnvironmentAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get an existing environment.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Orchestration.Airflow.Service.V1.Environment> GetEnvironmentAsync(global::Google.Cloud.Orchestration.Airflow.Service.V1.GetEnvironmentRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetEnvironment, null, options, request);
      }
      /// <summary>
      /// List environments.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Orchestration.Airflow.Service.V1.ListEnvironmentsResponse ListEnvironments(global::Google.Cloud.Orchestration.Airflow.Service.V1.ListEnvironmentsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListEnvironments(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List environments.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Orchestration.Airflow.Service.V1.ListEnvironmentsResponse ListEnvironments(global::Google.Cloud.Orchestration.Airflow.Service.V1.ListEnvironmentsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListEnvironments, null, options, request);
      }
      /// <summary>
      /// List environments.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Orchestration.Airflow.Service.V1.ListEnvironmentsResponse> ListEnvironmentsAsync(global::Google.Cloud.Orchestration.Airflow.Service.V1.ListEnvironmentsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListEnvironmentsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List environments.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Orchestration.Airflow.Service.V1.ListEnvironmentsResponse> ListEnvironmentsAsync(global::Google.Cloud.Orchestration.Airflow.Service.V1.ListEnvironmentsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListEnvironments, null, options, request);
      }
      /// <summary>
      /// Update an environment.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation UpdateEnvironment(global::Google.Cloud.Orchestration.Airflow.Service.V1.UpdateEnvironmentRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateEnvironment(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Update an environment.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation UpdateEnvironment(global::Google.Cloud.Orchestration.Airflow.Service.V1.UpdateEnvironmentRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateEnvironment, null, options, request);
      }
      /// <summary>
      /// Update an environment.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> UpdateEnvironmentAsync(global::Google.Cloud.Orchestration.Airflow.Service.V1.UpdateEnvironmentRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateEnvironmentAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Update an environment.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> UpdateEnvironmentAsync(global::Google.Cloud.Orchestration.Airflow.Service.V1.UpdateEnvironmentRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateEnvironment, null, options, request);
      }
      /// <summary>
      /// Delete an environment.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation DeleteEnvironment(global::Google.Cloud.Orchestration.Airflow.Service.V1.DeleteEnvironmentRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteEnvironment(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete an environment.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation DeleteEnvironment(global::Google.Cloud.Orchestration.Airflow.Service.V1.DeleteEnvironmentRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteEnvironment, null, options, request);
      }
      /// <summary>
      /// Delete an environment.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> DeleteEnvironmentAsync(global::Google.Cloud.Orchestration.Airflow.Service.V1.DeleteEnvironmentRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteEnvironmentAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete an environment.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> DeleteEnvironmentAsync(global::Google.Cloud.Orchestration.Airflow.Service.V1.DeleteEnvironmentRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteEnvironment, null, options, request);
      }
      /// <summary>
      /// Executes Airflow CLI command.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Orchestration.Airflow.Service.V1.ExecuteAirflowCommandResponse ExecuteAirflowCommand(global::Google.Cloud.Orchestration.Airflow.Service.V1.ExecuteAirflowCommandRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ExecuteAirflowCommand(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Executes Airflow CLI command.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Orchestration.Airflow.Service.V1.ExecuteAirflowCommandResponse ExecuteAirflowCommand(global::Google.Cloud.Orchestration.Airflow.Service.V1.ExecuteAirflowCommandRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ExecuteAirflowCommand, null, options, request);
      }
      /// <summary>
      /// Executes Airflow CLI command.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Orchestration.Airflow.Service.V1.ExecuteAirflowCommandResponse> ExecuteAirflowCommandAsync(global::Google.Cloud.Orchestration.Airflow.Service.V1.ExecuteAirflowCommandRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ExecuteAirflowCommandAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Executes Airflow CLI command.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Orchestration.Airflow.Service.V1.ExecuteAirflowCommandResponse> ExecuteAirflowCommandAsync(global::Google.Cloud.Orchestration.Airflow.Service.V1.ExecuteAirflowCommandRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ExecuteAirflowCommand, null, options, request);
      }
      /// <summary>
      /// Stops Airflow CLI command execution.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Orchestration.Airflow.Service.V1.StopAirflowCommandResponse StopAirflowCommand(global::Google.Cloud.Orchestration.Airflow.Service.V1.StopAirflowCommandRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return StopAirflowCommand(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Stops Airflow CLI command execution.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Orchestration.Airflow.Service.V1.StopAirflowCommandResponse StopAirflowCommand(global::Google.Cloud.Orchestration.Airflow.Service.V1.StopAirflowCommandRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_StopAirflowCommand, null, options, request);
      }
      /// <summary>
      /// Stops Airflow CLI command execution.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Orchestration.Airflow.Service.V1.StopAirflowCommandResponse> StopAirflowCommandAsync(global::Google.Cloud.Orchestration.Airflow.Service.V1.StopAirflowCommandRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return StopAirflowCommandAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Stops Airflow CLI command execution.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Orchestration.Airflow.Service.V1.StopAirflowCommandResponse> StopAirflowCommandAsync(global::Google.Cloud.Orchestration.Airflow.Service.V1.StopAirflowCommandRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_StopAirflowCommand, null, options, request);
      }
      /// <summary>
      /// Polls Airflow CLI command execution and fetches logs.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Orchestration.Airflow.Service.V1.PollAirflowCommandResponse PollAirflowCommand(global::Google.Cloud.Orchestration.Airflow.Service.V1.PollAirflowCommandRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PollAirflowCommand(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Polls Airflow CLI command execution and fetches logs.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Orchestration.Airflow.Service.V1.PollAirflowCommandResponse PollAirflowCommand(global::Google.Cloud.Orchestration.Airflow.Service.V1.PollAirflowCommandRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PollAirflowCommand, null, options, request);
      }
      /// <summary>
      /// Polls Airflow CLI command execution and fetches logs.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Orchestration.Airflow.Service.V1.PollAirflowCommandResponse> PollAirflowCommandAsync(global::Google.Cloud.Orchestration.Airflow.Service.V1.PollAirflowCommandRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PollAirflowCommandAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Polls Airflow CLI command execution and fetches logs.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Orchestration.Airflow.Service.V1.PollAirflowCommandResponse> PollAirflowCommandAsync(global::Google.Cloud.Orchestration.Airflow.Service.V1.PollAirflowCommandRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PollAirflowCommand, null, options, request);
      }
      /// <summary>
      /// Creates a snapshots of a Cloud Composer environment.
      ///
      /// As a result of this operation, snapshot of environment's state is stored
      /// in a location specified in the SaveSnapshotRequest.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation SaveSnapshot(global::Google.Cloud.Orchestration.Airflow.Service.V1.SaveSnapshotRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SaveSnapshot(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a snapshots of a Cloud Composer environment.
      ///
      /// As a result of this operation, snapshot of environment's state is stored
      /// in a location specified in the SaveSnapshotRequest.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation SaveSnapshot(global::Google.Cloud.Orchestration.Airflow.Service.V1.SaveSnapshotRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SaveSnapshot, null, options, request);
      }
      /// <summary>
      /// Creates a snapshots of a Cloud Composer environment.
      ///
      /// As a result of this operation, snapshot of environment's state is stored
      /// in a location specified in the SaveSnapshotRequest.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> SaveSnapshotAsync(global::Google.Cloud.Orchestration.Airflow.Service.V1.SaveSnapshotRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SaveSnapshotAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a snapshots of a Cloud Composer environment.
      ///
      /// As a result of this operation, snapshot of environment's state is stored
      /// in a location specified in the SaveSnapshotRequest.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> SaveSnapshotAsync(global::Google.Cloud.Orchestration.Airflow.Service.V1.SaveSnapshotRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SaveSnapshot, null, options, request);
      }
      /// <summary>
      /// Loads a snapshot of a Cloud Composer environment.
      ///
      /// As a result of this operation, a snapshot of environment's specified in
      /// LoadSnapshotRequest is loaded into the environment.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation LoadSnapshot(global::Google.Cloud.Orchestration.Airflow.Service.V1.LoadSnapshotRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return LoadSnapshot(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Loads a snapshot of a Cloud Composer environment.
      ///
      /// As a result of this operation, a snapshot of environment's specified in
      /// LoadSnapshotRequest is loaded into the environment.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation LoadSnapshot(global::Google.Cloud.Orchestration.Airflow.Service.V1.LoadSnapshotRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_LoadSnapshot, null, options, request);
      }
      /// <summary>
      /// Loads a snapshot of a Cloud Composer environment.
      ///
      /// As a result of this operation, a snapshot of environment's specified in
      /// LoadSnapshotRequest is loaded into the environment.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> LoadSnapshotAsync(global::Google.Cloud.Orchestration.Airflow.Service.V1.LoadSnapshotRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return LoadSnapshotAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Loads a snapshot of a Cloud Composer environment.
      ///
      /// As a result of this operation, a snapshot of environment's specified in
      /// LoadSnapshotRequest is loaded into the environment.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> LoadSnapshotAsync(global::Google.Cloud.Orchestration.Airflow.Service.V1.LoadSnapshotRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_LoadSnapshot, null, options, request);
      }
      /// <summary>
      /// Triggers database failover (only for highly resilient environments).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation DatabaseFailover(global::Google.Cloud.Orchestration.Airflow.Service.V1.DatabaseFailoverRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DatabaseFailover(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Triggers database failover (only for highly resilient environments).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation DatabaseFailover(global::Google.Cloud.Orchestration.Airflow.Service.V1.DatabaseFailoverRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DatabaseFailover, null, options, request);
      }
      /// <summary>
      /// Triggers database failover (only for highly resilient environments).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> DatabaseFailoverAsync(global::Google.Cloud.Orchestration.Airflow.Service.V1.DatabaseFailoverRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DatabaseFailoverAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Triggers database failover (only for highly resilient environments).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> DatabaseFailoverAsync(global::Google.Cloud.Orchestration.Airflow.Service.V1.DatabaseFailoverRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DatabaseFailover, null, options, request);
      }
      /// <summary>
      /// Fetches database properties.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Orchestration.Airflow.Service.V1.FetchDatabasePropertiesResponse FetchDatabaseProperties(global::Google.Cloud.Orchestration.Airflow.Service.V1.FetchDatabasePropertiesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return FetchDatabaseProperties(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Fetches database properties.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Orchestration.Airflow.Service.V1.FetchDatabasePropertiesResponse FetchDatabaseProperties(global::Google.Cloud.Orchestration.Airflow.Service.V1.FetchDatabasePropertiesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_FetchDatabaseProperties, null, options, request);
      }
      /// <summary>
      /// Fetches database properties.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Orchestration.Airflow.Service.V1.FetchDatabasePropertiesResponse> FetchDatabasePropertiesAsync(global::Google.Cloud.Orchestration.Airflow.Service.V1.FetchDatabasePropertiesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return FetchDatabasePropertiesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Fetches database properties.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Orchestration.Airflow.Service.V1.FetchDatabasePropertiesResponse> FetchDatabasePropertiesAsync(global::Google.Cloud.Orchestration.Airflow.Service.V1.FetchDatabasePropertiesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_FetchDatabaseProperties, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override EnvironmentsClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new EnvironmentsClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(EnvironmentsBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_CreateEnvironment, serviceImpl.CreateEnvironment)
          .AddMethod(__Method_GetEnvironment, serviceImpl.GetEnvironment)
          .AddMethod(__Method_ListEnvironments, serviceImpl.ListEnvironments)
          .AddMethod(__Method_UpdateEnvironment, serviceImpl.UpdateEnvironment)
          .AddMethod(__Method_DeleteEnvironment, serviceImpl.DeleteEnvironment)
          .AddMethod(__Method_ExecuteAirflowCommand, serviceImpl.ExecuteAirflowCommand)
          .AddMethod(__Method_StopAirflowCommand, serviceImpl.StopAirflowCommand)
          .AddMethod(__Method_PollAirflowCommand, serviceImpl.PollAirflowCommand)
          .AddMethod(__Method_SaveSnapshot, serviceImpl.SaveSnapshot)
          .AddMethod(__Method_LoadSnapshot, serviceImpl.LoadSnapshot)
          .AddMethod(__Method_DatabaseFailover, serviceImpl.DatabaseFailover)
          .AddMethod(__Method_FetchDatabaseProperties, serviceImpl.FetchDatabaseProperties).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, EnvironmentsBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_CreateEnvironment, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Orchestration.Airflow.Service.V1.CreateEnvironmentRequest, global::Google.LongRunning.Operation>(serviceImpl.CreateEnvironment));
      serviceBinder.AddMethod(__Method_GetEnvironment, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Orchestration.Airflow.Service.V1.GetEnvironmentRequest, global::Google.Cloud.Orchestration.Airflow.Service.V1.Environment>(serviceImpl.GetEnvironment));
      serviceBinder.AddMethod(__Method_ListEnvironments, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Orchestration.Airflow.Service.V1.ListEnvironmentsRequest, global::Google.Cloud.Orchestration.Airflow.Service.V1.ListEnvironmentsResponse>(serviceImpl.ListEnvironments));
      serviceBinder.AddMethod(__Method_UpdateEnvironment, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Orchestration.Airflow.Service.V1.UpdateEnvironmentRequest, global::Google.LongRunning.Operation>(serviceImpl.UpdateEnvironment));
      serviceBinder.AddMethod(__Method_DeleteEnvironment, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Orchestration.Airflow.Service.V1.DeleteEnvironmentRequest, global::Google.LongRunning.Operation>(serviceImpl.DeleteEnvironment));
      serviceBinder.AddMethod(__Method_ExecuteAirflowCommand, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Orchestration.Airflow.Service.V1.ExecuteAirflowCommandRequest, global::Google.Cloud.Orchestration.Airflow.Service.V1.ExecuteAirflowCommandResponse>(serviceImpl.ExecuteAirflowCommand));
      serviceBinder.AddMethod(__Method_StopAirflowCommand, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Orchestration.Airflow.Service.V1.StopAirflowCommandRequest, global::Google.Cloud.Orchestration.Airflow.Service.V1.StopAirflowCommandResponse>(serviceImpl.StopAirflowCommand));
      serviceBinder.AddMethod(__Method_PollAirflowCommand, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Orchestration.Airflow.Service.V1.PollAirflowCommandRequest, global::Google.Cloud.Orchestration.Airflow.Service.V1.PollAirflowCommandResponse>(serviceImpl.PollAirflowCommand));
      serviceBinder.AddMethod(__Method_SaveSnapshot, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Orchestration.Airflow.Service.V1.SaveSnapshotRequest, global::Google.LongRunning.Operation>(serviceImpl.SaveSnapshot));
      serviceBinder.AddMethod(__Method_LoadSnapshot, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Orchestration.Airflow.Service.V1.LoadSnapshotRequest, global::Google.LongRunning.Operation>(serviceImpl.LoadSnapshot));
      serviceBinder.AddMethod(__Method_DatabaseFailover, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Orchestration.Airflow.Service.V1.DatabaseFailoverRequest, global::Google.LongRunning.Operation>(serviceImpl.DatabaseFailover));
      serviceBinder.AddMethod(__Method_FetchDatabaseProperties, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Orchestration.Airflow.Service.V1.FetchDatabasePropertiesRequest, global::Google.Cloud.Orchestration.Airflow.Service.V1.FetchDatabasePropertiesResponse>(serviceImpl.FetchDatabaseProperties));
    }

  }
}
#endregion
